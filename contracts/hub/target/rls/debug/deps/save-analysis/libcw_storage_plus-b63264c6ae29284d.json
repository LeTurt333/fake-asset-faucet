{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1","program":"/home/turtle/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","cw_storage_plus","--edition=2018","/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"iterator\"","-C","metadata=b63264c6ae29284d","-C","extra-filename=-b63264c6ae29284d","--out-dir","/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps","-L","dependency=/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps","--extern","cosmwasm_std=/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps/libcosmwasm_std-ec6604881a0b69e1.rmeta","--extern","schemars=/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps/libschemars-b1fd1db1c6c49eb2.rmeta","--extern","serde=/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps/libserde-7d46a467cbb4215e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/turtle/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/turtle/fake_asset_faucet/contracts/cw721-hub/target/rls/debug/deps/libcw_storage_plus-b63264c6ae29284d.rmeta"},"prelude":{"crate_id":{"name":"cw_storage_plus","disambiguator":[7247124500655832129,0]},"crate_root":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src","external_crates":[{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3488764316664526318,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8055937789589085173,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9266852701449989672,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3150474620658042907,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7885665867006586706,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12703856752884015026,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2969720598907790989,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2619625876091296344,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[12464395834502290914,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6756473508419496664,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15198303206847108385,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[2772378233732002785,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12984264205291464654,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17906896803061581552,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[6255416831383744366,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17027395046702333165,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[17940528507109169175,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[16282955217049922585,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[15640776750749541284,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":20,"id":{"name":"cosmwasm_std","disambiguator":[10803545031308839022,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":21,"id":{"name":"schemars","disambiguator":[8474686280795391473,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":22,"id":{"name":"schemars_derive","disambiguator":[17308298478272094777,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":23,"id":{"name":"serde_json","disambiguator":[9129702050307105037,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","num":24,"id":{"name":"serde","disambiguator":[824305381868174268,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","num":25,"id":{"name":"serde_derive","disambiguator":[3598524168949189907,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":26,"id":{"name":"itoa","disambiguator":[4744432788679605432,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":27,"id":{"name":"ryu","disambiguator":[13272564402323909184,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":28,"id":{"name":"dyn_clone","disambiguator":[18438843675720519334,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":29,"id":{"name":"cosmwasm_crypto","disambiguator":[14922299028244261028,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":30,"id":{"name":"ed25519_zebra","disambiguator":[8975931495085680302,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":31,"id":{"name":"curve25519_dalek","disambiguator":[6025509857938692208,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":32,"id":{"name":"byteorder","disambiguator":[1317338499916352615,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":33,"id":{"name":"digest","disambiguator":[2344585940975527407,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":34,"id":{"name":"generic_array","disambiguator":[13143185818654299955,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":35,"id":{"name":"typenum","disambiguator":[1684001055960365863,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":36,"id":{"name":"rand_core","disambiguator":[8594395224349422731,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":37,"id":{"name":"getrandom","disambiguator":[10490376007579171599,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":38,"id":{"name":"cfg_if","disambiguator":[8027478366546687506,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":39,"id":{"name":"libc","disambiguator":[2745473335662636762,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":40,"id":{"name":"zeroize","disambiguator":[14908103604938018053,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":41,"id":{"name":"subtle","disambiguator":[11374537631354390196,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":42,"id":{"name":"rand_core","disambiguator":[10696095828523082231,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":43,"id":{"name":"getrandom","disambiguator":[14811531483943133974,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":44,"id":{"name":"sha2","disambiguator":[18087071533681887963,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":45,"id":{"name":"block_buffer","disambiguator":[8608448586100531722,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":46,"id":{"name":"opaque_debug","disambiguator":[3123338400136960121,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":47,"id":{"name":"cpufeatures","disambiguator":[364794068510456234,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":48,"id":{"name":"thiserror","disambiguator":[16366075916537494496,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":49,"id":{"name":"thiserror_impl","disambiguator":[777297237178620108,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":50,"id":{"name":"hex","disambiguator":[1025244451999503072,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":51,"id":{"name":"digest","disambiguator":[17483126949393744080,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":52,"id":{"name":"crypto_common","disambiguator":[12735002056619446014,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":53,"id":{"name":"block_buffer","disambiguator":[3629285001286207310,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":54,"id":{"name":"k256","disambiguator":[5096217696178625872,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":55,"id":{"name":"elliptic_curve","disambiguator":[12412017430357572878,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":56,"id":{"name":"crypto_bigint","disambiguator":[9932075237898122376,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":57,"id":{"name":"group","disambiguator":[10312839004893683960,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":58,"id":{"name":"ff","disambiguator":[13616822603003369995,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":59,"id":{"name":"sec1","disambiguator":[6304097098927848057,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":60,"id":{"name":"base16ct","disambiguator":[8454818607884618653,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":61,"id":{"name":"der","disambiguator":[7173639707759562287,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":62,"id":{"name":"const_oid","disambiguator":[8483744770221511587,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":63,"id":{"name":"pkcs8","disambiguator":[4076055683539264791,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":64,"id":{"name":"spki","disambiguator":[12510668002441717760,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":65,"id":{"name":"ecdsa","disambiguator":[3205171752162813730,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":66,"id":{"name":"signature","disambiguator":[9040108903412562004,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":67,"id":{"name":"rfc6979","disambiguator":[10266971470767048403,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":68,"id":{"name":"hmac","disambiguator":[11382411720931235711,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":69,"id":{"name":"sha2","disambiguator":[17552030320879078812,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":70,"id":{"name":"forward_ref","disambiguator":[12557450797404519440,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":71,"id":{"name":"derivative","disambiguator":[13511057912003062787,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":72,"id":{"name":"cosmwasm_derive","disambiguator":[11794830096772262866,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":73,"id":{"name":"uint","disambiguator":[18416791182040077854,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":74,"id":{"name":"static_assertions","disambiguator":[8132521657325139995,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":75,"id":{"name":"crunchy","disambiguator":[6622353517055362483,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":76,"id":{"name":"base64","disambiguator":[16760821550569399237,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","num":77,"id":{"name":"serde_json_wasm","disambiguator":[14268225840738824151,0]}}],"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":0,"byte_end":1224,"line_start":1,"line_end":50,"column_start":1,"column_end":29}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/mod.rs","byte_start":135411,"byte_end":135421,"line_start":6,"line_end":6,"column_start":16,"column_end":26},"alias_span":null,"name":"MultiIndex","value":"","parent":{"krate":0,"index":574}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/mod.rs","byte_start":135439,"byte_end":135450,"line_start":7,"line_end":7,"column_start":17,"column_end":28},"alias_span":null,"name":"UniqueIndex","value":"","parent":{"krate":0,"index":574}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":258385,"byte_end":258397,"line_start":5,"line_end":5,"column_start":15,"column_end":27},"alias_span":null,"name":"SnapshotItem","value":"","parent":{"krate":0,"index":1430}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":258412,"byte_end":258423,"line_start":6,"line_end":6,"column_start":14,"column_end":25},"alias_span":null,"name":"SnapshotMap","value":"","parent":{"krate":0,"index":1430}},{"kind":"Use","ref_id":{"krate":0,"index":1763},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":249,"byte_end":254,"line_start":19,"line_end":19,"column_start":17,"column_end":22},"alias_span":null,"name":"Bound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":256,"byte_end":263,"line_start":19,"line_end":19,"column_start":24,"column_end":31},"alias_span":null,"name":"Bounder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":265,"byte_end":276,"line_start":19,"line_end":19,"column_start":33,"column_end":44},"alias_span":null,"name":"PrefixBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1752},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":278,"byte_end":286,"line_start":19,"line_end":19,"column_start":46,"column_end":54},"alias_span":null,"name":"RawBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":301,"byte_end":315,"line_start":20,"line_end":20,"column_start":13,"column_end":27},"alias_span":null,"name":"KeyDeserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":187},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":332,"byte_end":340,"line_start":21,"line_end":21,"column_start":16,"column_end":24},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":386,"byte_end":398,"line_start":23,"line_end":23,"column_start":16,"column_end":28},"alias_span":null,"name":"VecDequeIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":416,"byte_end":422,"line_start":24,"line_end":24,"column_start":17,"column_end":23},"alias_span":null,"name":"Endian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":475,"byte_end":484,"line_start":26,"line_end":26,"column_start":23,"column_end":32},"alias_span":null,"name":"IndexList","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":486,"byte_end":496,"line_start":26,"line_end":26,"column_start":34,"column_end":44},"alias_span":null,"name":"IndexedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":554,"byte_end":572,"line_start":28,"line_end":28,"column_start":27,"column_end":45},"alias_span":null,"name":"IndexedSnapshotMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":620,"byte_end":625,"line_start":30,"line_end":30,"column_start":18,"column_end":23},"alias_span":null,"name":"Index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":673,"byte_end":683,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"alias_span":null,"name":"MultiIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":731,"byte_end":742,"line_start":34,"line_end":34,"column_start":18,"column_end":29},"alias_span":null,"name":"UniqueIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":873},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":761,"byte_end":767,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"alias_span":null,"name":"IntKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":921},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":783,"byte_end":787,"line_start":36,"line_end":36,"column_start":15,"column_end":19},"alias_span":null,"name":"Item","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2052},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":804,"byte_end":807,"line_start":37,"line_end":37,"column_start":16,"column_end":19},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1039},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":809,"byte_end":817,"line_start":37,"line_end":37,"column_start":21,"column_end":29},"alias_span":null,"name":"Prefixer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":819,"byte_end":829,"line_start":37,"line_end":37,"column_start":31,"column_end":41},"alias_span":null,"name":"PrimaryKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2180},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":845,"byte_end":848,"line_start":38,"line_end":38,"column_start":14,"column_end":17},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2197},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":864,"byte_end":868,"line_start":39,"line_end":39,"column_start":15,"column_end":19},"alias_span":null,"name":"Path","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1410},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":916,"byte_end":933,"line_start":41,"line_end":41,"column_start":18,"column_end":35},"alias_span":null,"name":"range_with_prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2207},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":935,"byte_end":941,"line_start":41,"line_end":41,"column_start":37,"column_end":43},"alias_span":null,"name":"Prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":992,"byte_end":1004,"line_start":43,"line_end":43,"column_start":20,"column_end":32},"alias_span":null,"name":"SnapshotItem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":1006,"byte_end":1017,"line_start":43,"line_end":43,"column_start":34,"column_end":45},"alias_span":null,"name":"SnapshotMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2238},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":1019,"byte_end":1027,"line_start":43,"line_end":43,"column_start":47,"column_end":55},"alias_span":null,"name":"Strategy","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","byte_start":0,"byte_end":1224,"line_start":1,"line_end":50,"column_start":1,"column_end":29},"name":"","qualname":"::","value":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":82},{"krate":0,"index":147},{"krate":0,"index":249},{"krate":0,"index":261},{"krate":0,"index":319},{"krate":0,"index":444},{"krate":0,"index":574},{"krate":0,"index":869},{"krate":0,"index":879},{"krate":0,"index":943},{"krate":0,"index":971},{"krate":0,"index":1105},{"krate":0,"index":1239},{"krate":0,"index":1294},{"krate":0,"index":1430},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1753},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1841,"byte_end":1850,"line_start":16,"line_end":16,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::RawBound::Inclusive","value":"RawBound::Inclusive(Vec<u8>)","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1851,"byte_end":1858,"line_start":16,"line_end":16,"column_start":15,"column_end":22},"name":"0","qualname":"::bound::RawBound::Inclusive::0","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1865,"byte_end":1874,"line_start":17,"line_end":17,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::RawBound::Exclusive","value":"RawBound::Exclusive(Vec<u8>)","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1758},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1875,"byte_end":1882,"line_start":17,"line_end":17,"column_start":15,"column_end":22},"name":"0","qualname":"::bound::RawBound::Exclusive::0","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1756},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1752},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1826,"byte_end":1834,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"RawBound","qualname":"::bound::RawBound","value":"enum RawBound { Inclusive(Vec<u8>), Exclusive(Vec<u8>), }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1756}],"decl_id":null,"docs":" `RawBound` is used to define the two ends of a range, more explicit than `Option<u8>`.\n `None` means that we don't limit that side of the range at all.\n `Inclusive` means we use the given bytes as a limit and *include* anything at that exact key.\n `Exclusive` means we use the given bytes as a limit and *exclude* anything at that exact key.\n See `Bound` for a type safe way to build these bounds.\n","sig":null,"attributes":[{"value":"/ `RawBound` is used to define the two ends of a range, more explicit than `Option<u8>`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1379,"byte_end":1469,"line_start":9,"line_end":9,"column_start":1,"column_end":91}},{"value":"/ `None` means that we don't limit that side of the range at all.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1470,"byte_end":1537,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ `Inclusive` means we use the given bytes as a limit and *include* anything at that exact key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1538,"byte_end":1635,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ `Exclusive` means we use the given bytes as a limit and *exclude* anything at that exact key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1636,"byte_end":1733,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ See `Bound` for a type safe way to build these bounds.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1734,"byte_end":1792,"line_start":13,"line_end":13,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2275,"byte_end":2284,"line_start":26,"line_end":26,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::Bound::Inclusive","value":"Bound::Inclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1768},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2285,"byte_end":2311,"line_start":26,"line_end":26,"column_start":15,"column_end":41},"name":"0","qualname":"::bound::Bound::Inclusive::0","value":"(K, std::marker::PhantomData<&'a bool>)","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1769},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2318,"byte_end":2327,"line_start":27,"line_end":27,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::Bound::Exclusive","value":"Bound::Exclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1771},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2328,"byte_end":2354,"line_start":27,"line_end":27,"column_start":15,"column_end":41},"name":"0","qualname":"::bound::Bound::Exclusive::0","value":"(K, std::marker::PhantomData<&'a bool>)","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2361,"byte_end":2373,"line_start":28,"line_end":28,"column_start":5,"column_end":17},"name":"InclusiveRaw","qualname":"::bound::Bound::InclusiveRaw","value":"Bound::InclusiveRaw(Vec<u8>)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1774},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2374,"byte_end":2381,"line_start":28,"line_end":28,"column_start":18,"column_end":25},"name":"0","qualname":"::bound::Bound::InclusiveRaw::0","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2388,"byte_end":2400,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"ExclusiveRaw","qualname":"::bound::Bound::ExclusiveRaw","value":"Bound::ExclusiveRaw(Vec<u8>)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1777},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2401,"byte_end":2408,"line_start":29,"line_end":29,"column_start":18,"column_end":25},"name":"0","qualname":"::bound::Bound::ExclusiveRaw::0","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1775},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1763},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2240,"byte_end":2245,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Bound","qualname":"::bound::Bound","value":"enum Bound<'a, K> where K: PrimaryKey {\n    Inclusive((K, PhantomData<&'a bool>)),\n    Exclusive((K, PhantomData<&'a bool>)),\n    InclusiveRaw(Vec<u8>),\n    ExclusiveRaw(Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1772},{"krate":0,"index":1775}],"decl_id":null,"docs":" `Bound` is used to define the two ends of a range.\n `None` means that we don't limit that side of the range at all.\n `Inclusive` means we use the given value as a limit and *include* anything at that exact key.\n `Exclusive` means we use the given value as a limit and *exclude* anything at that exact key.\n","sig":null,"attributes":[{"value":"/ `Bound` is used to define the two ends of a range.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1888,"byte_end":1942,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"/ `None` means that we don't limit that side of the range at all.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":1943,"byte_end":2010,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ `Inclusive` means we use the given value as a limit and *include* anything at that exact key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2011,"byte_end":2108,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ `Exclusive` means we use the given value as a limit and *exclude* anything at that exact key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2109,"byte_end":2206,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2468,"byte_end":2477,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"inclusive","qualname":"<Bound>::inclusive","value":"fn inclusive<T>(T) -> Self where T: Into<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2573,"byte_end":2582,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"exclusive","qualname":"<Bound>::exclusive","value":"fn exclusive<T>(T) -> Self where T: Into<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2678,"byte_end":2690,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"to_raw_bound","qualname":"<Bound>::to_raw_bound","value":"fn to_raw_bound<'_>(&'_ Self) -> RawBound","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1789},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3134,"byte_end":3143,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::PrefixBound::Inclusive","value":"PrefixBound::Inclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1791},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3144,"byte_end":3170,"line_start":53,"line_end":53,"column_start":15,"column_end":41},"name":"0","qualname":"::bound::PrefixBound::Inclusive::0","value":"(K, std::marker::PhantomData<&'a bool>)","parent":{"krate":0,"index":1789},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1792},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3177,"byte_end":3186,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::PrefixBound::Exclusive","value":"PrefixBound::Exclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1794},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3187,"byte_end":3213,"line_start":54,"line_end":54,"column_start":15,"column_end":41},"name":"0","qualname":"::bound::PrefixBound::Exclusive::0","value":"(K, std::marker::PhantomData<&'a bool>)","parent":{"krate":0,"index":1792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1786},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3095,"byte_end":3106,"line_start":52,"line_end":52,"column_start":10,"column_end":21},"name":"PrefixBound","qualname":"::bound::PrefixBound","value":"enum PrefixBound<'a, K> where K: Prefixer {\n    Inclusive((K, PhantomData<&'a bool>)),\n    Exclusive((K, PhantomData<&'a bool>)),\n}","parent":null,"children":[{"krate":0,"index":1789},{"krate":0,"index":1792}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3277,"byte_end":3286,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"inclusive","qualname":"<PrefixBound>::inclusive","value":"fn inclusive<T>(T) -> Self where T: Into<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3382,"byte_end":3391,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"exclusive","qualname":"<PrefixBound>::exclusive","value":"fn exclusive<T>(T) -> Self where T: Into<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3487,"byte_end":3499,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"to_raw_bound","qualname":"<PrefixBound>::to_raw_bound","value":"fn to_raw_bound<'_>(&'_ Self) -> RawBound","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3743,"byte_end":3750,"line_start":74,"line_end":74,"column_start":11,"column_end":18},"name":"Bounder","qualname":"::bound::Bounder","value":"Bounder<'a>: PrimaryKey + Sized","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3788,"byte_end":3803,"line_start":75,"line_end":75,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"::bound::Bounder::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3845,"byte_end":3860,"line_start":76,"line_end":76,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"::bound::Bounder::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3935,"byte_end":3950,"line_start":80,"line_end":80,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<() as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4012,"byte_end":4027,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<() as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4128,"byte_end":4143,"line_start":89,"line_end":89,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<&'a [u8] as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4229,"byte_end":4244,"line_start":92,"line_end":92,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<&'a [u8] as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4501,"byte_end":4516,"line_start":103,"line_end":103,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<(T, U) as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4602,"byte_end":4617,"line_start":106,"line_end":106,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<(T, U) as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":4927,"byte_end":4942,"line_start":118,"line_end":118,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<(T, U, V) as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5028,"byte_end":5043,"line_start":121,"line_end":121,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<(T, U, V) as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5167,"byte_end":5182,"line_start":127,"line_end":127,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<&'a str as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5268,"byte_end":5283,"line_start":130,"line_end":130,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<&'a str as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5406,"byte_end":5421,"line_start":136,"line_end":136,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<String as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5507,"byte_end":5522,"line_start":139,"line_end":139,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<String as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5646,"byte_end":5661,"line_start":145,"line_end":145,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<Vec<u8> as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5747,"byte_end":5762,"line_start":148,"line_end":148,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<Vec<u8> as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5887,"byte_end":5902,"line_start":154,"line_end":154,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<&'a Addr as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5988,"byte_end":6003,"line_start":157,"line_end":157,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<&'a Addr as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":6124,"byte_end":6139,"line_start":163,"line_end":163,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"<Addr as bound::Bounder>::inclusive_bound","value":"fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":38},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":6225,"byte_end":6240,"line_start":166,"line_end":166,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"<Addr as bound::Bounder>::exclusive_bound","value":"fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":{"krate":0,"index":39},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":6897,"byte_end":6911,"line_start":8,"line_end":8,"column_start":11,"column_end":25},"name":"KeyDeserialize","qualname":"::de::KeyDeserialize","value":"KeyDeserialize","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":6923,"byte_end":6929,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Output","qualname":"::de::KeyDeserialize::Output","value":"type Output: Sized;","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":6946,"byte_end":6954,"line_start":11,"line_end":11,"column_start":8,"column_end":16},"name":"from_vec","qualname":"::de::KeyDeserialize::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7007,"byte_end":7017,"line_start":13,"line_end":13,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::de::KeyDeserialize::from_slice","value":"fn from_slice<'_>(&'_ [u8]) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7190,"byte_end":7198,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<() as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7165,"byte_end":7182,"line_start":21,"line_end":21,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7360,"byte_end":7368,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<Vec<u8> as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7335,"byte_end":7352,"line_start":30,"line_end":30,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7533,"byte_end":7541,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<&'_ Vec<u8> as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7508,"byte_end":7525,"line_start":39,"line_end":39,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7703,"byte_end":7711,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<&'_ [u8] as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7678,"byte_end":7695,"line_start":48,"line_end":48,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7873,"byte_end":7881,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<String as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7848,"byte_end":7865,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8091,"byte_end":8099,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<&'_ String as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8066,"byte_end":8083,"line_start":66,"line_end":66,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8279,"byte_end":8287,"line_start":76,"line_end":76,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<&'_ str as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8254,"byte_end":8271,"line_start":75,"line_end":75,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8465,"byte_end":8473,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<Addr as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8440,"byte_end":8457,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8668,"byte_end":8676,"line_start":94,"line_end":94,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<&'_ Addr as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8643,"byte_end":8660,"line_start":93,"line_end":93,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":9621,"byte_end":9629,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<(T, U) as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":9596,"byte_end":9613,"line_start":127,"line_end":127,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":10034,"byte_end":10042,"line_start":141,"line_end":141,"column_start":8,"column_end":16},"name":"from_vec","qualname":"<(T, U, V) as de::KeyDeserialize>::from_vec","value":"fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":{"krate":0,"index":104},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":10009,"byte_end":10026,"line_start":140,"line_end":140,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14788,"byte_end":14796,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"VecDeque","qualname":"::deque::VecDeque","value":"VecDeque {  }","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" A deque stores multiple items at the given key. It provides efficient FIFO and LIFO access,\n as well as direct index access.","sig":null,"attributes":[{"value":"/ A deque stores multiple items at the given key. It provides efficient FIFO and LIFO access,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14473,"byte_end":14568,"line_start":12,"line_end":12,"column_start":1,"column_end":96}},{"value":"/ as well as direct index access.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14569,"byte_end":14604,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14605,"byte_end":14608,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ It has a maximum capacity of `u32::MAX - 1`. Make sure to never exceed that number when using this type.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14609,"byte_end":14717,"line_start":15,"line_end":15,"column_start":1,"column_end":109}},{"value":"/ If you do, the methods won't work as intended anymore.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":14718,"byte_end":14776,"line_start":16,"line_end":16,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15063,"byte_end":15066,"line_start":25,"line_end":25,"column_start":18,"column_end":21},"name":"new","qualname":"<VecDeque>::new","value":"const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15330,"byte_end":15339,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"push_back","qualname":"<VecDeque>::push_back","value":"fn push_back<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ T)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given value to the end of the deque\n","sig":null,"attributes":[{"value":"/ Adds the given value to the end of the deque","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15270,"byte_end":15318,"line_start":34,"line_end":34,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15680,"byte_end":15690,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"push_front","qualname":"<VecDeque>::push_front","value":"fn push_front<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ T)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given value to the front of the deque\n","sig":null,"attributes":[{"value":"/ Adds the given value to the front of the deque","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15618,"byte_end":15668,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":16102,"byte_end":16110,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<VecDeque>::pop_back","value":"fn pop_back<'_, '_>(&'_ Self, &'_ mut dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element of the deque and returns it\n","sig":null,"attributes":[{"value":"/ Removes the last element of the deque and returns it","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":16034,"byte_end":16090,"line_start":56,"line_end":56,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":16586,"byte_end":16595,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<VecDeque>::pop_front","value":"fn pop_front<'_, '_>(&'_ Self, &'_ mut dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element of the deque and returns it\n","sig":null,"attributes":[{"value":"/ Removes the first element of the deque and returns it","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":16517,"byte_end":16574,"line_start":69,"line_end":69,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17076,"byte_end":17081,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"name":"front","qualname":"<VecDeque>::front","value":"fn front<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the deque without removing it\n","sig":null,"attributes":[{"value":"/ Returns the first element of the deque without removing it","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17002,"byte_end":17064,"line_start":82,"line_end":82,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17303,"byte_end":17307,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"back","qualname":"<VecDeque>::back","value":"fn back<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the deque without removing it\n","sig":null,"attributes":[{"value":"/ Returns the first element of the deque without removing it","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17229,"byte_end":17291,"line_start":88,"line_end":88,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17559,"byte_end":17562,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"len","qualname":"<VecDeque>::len","value":"fn len<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the length of the deque.\n","sig":null,"attributes":[{"value":"/ Gets the length of the deque.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17471,"byte_end":17504,"line_start":94,"line_end":94,"column_start":5,"column_end":38}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17509,"byte_end":17547,"line_start":95,"line_end":95,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17752,"byte_end":17760,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VecDeque>::is_empty","value":"fn is_empty<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the deque contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the deque contains no elements.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":17687,"byte_end":17740,"line_start":100,"line_end":100,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":19615,"byte_end":19618,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"get","qualname":"<VecDeque>::get","value":"fn get<'_, '_>(&'_ Self, &'_ dyn Storage, u32) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value at the given position in the queue or `None` if the index is out of bounds\n","sig":null,"attributes":[{"value":"/ Returns the value at the given position in the queue or `None` if the index is out of bounds","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":19507,"byte_end":19603,"line_start":153,"line_end":153,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21261,"byte_end":21265,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"iter","qualname":"<VecDeque>::iter","value":"fn iter<'_>(&'_ Self, &'a dyn Storage) -> StdResult<VecDequeIter>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21541,"byte_end":21553,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"VecDequeIter","qualname":"::deque::VecDequeIter","value":"VecDequeIter {  }","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"iterator\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21501,"byte_end":21529,"line_start":211,"line_end":211,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21858,"byte_end":21862,"line_start":229,"line_end":229,"column_start":8,"column_end":12},"name":"next","qualname":"<VecDequeIter as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8596},"children":[],"decl_id":{"krate":2,"index":8598},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":22238,"byte_end":22247,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<VecDequeIter as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8596},"children":[],"decl_id":{"krate":2,"index":8602},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":22655,"byte_end":22658,"line_start":252,"line_end":252,"column_start":8,"column_end":11},"name":"nth","qualname":"<VecDequeIter as std::iter::Iterator>::nth","value":"fn nth<'_>(&'_ mut Self, usize) -> Option<Self::Item>","parent":{"krate":2,"index":8596},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":23129,"byte_end":23138,"line_start":269,"line_end":269,"column_start":8,"column_end":17},"name":"next_back","qualname":"<VecDequeIter as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8442},"children":[],"decl_id":{"krate":2,"index":8443},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":23599,"byte_end":23607,"line_start":284,"line_end":284,"column_start":8,"column_end":16},"name":"nth_back","qualname":"<VecDequeIter as std::iter::DoubleEndedIterator>::nth_back","value":"fn nth_back<'_>(&'_ mut Self, usize) -> Option<Self::Item>","parent":{"krate":2,"index":8442},"children":[],"decl_id":{"krate":2,"index":8445},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":253},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36235,"byte_end":36241,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"Endian","qualname":"::endian::Endian","value":"Endian: Sized + Copy","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":254},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36267,"byte_end":36270,"line_start":13,"line_end":13,"column_start":10,"column_end":13},"name":"Buf","qualname":"::endian::Endian::Buf","value":"type Buf: AsRef<[u8]> + AsMut<[u8]> + Into<Vec<u8>> + Default;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36333,"byte_end":36344,"line_start":15,"line_end":15,"column_start":8,"column_end":19},"name":"to_le_bytes","qualname":"::endian::Endian::to_le_bytes","value":"fn to_le_bytes(Self) -> Self::Buf","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36372,"byte_end":36383,"line_start":16,"line_end":16,"column_start":8,"column_end":19},"name":"to_be_bytes","qualname":"::endian::Endian::to_be_bytes","value":"fn to_be_bytes(Self) -> Self::Buf","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36412,"byte_end":36425,"line_start":18,"line_end":18,"column_start":8,"column_end":21},"name":"from_le_bytes","qualname":"::endian::Endian::from_le_bytes","value":"fn from_le_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36460,"byte_end":36473,"line_start":19,"line_end":19,"column_start":8,"column_end":21},"name":"from_be_bytes","qualname":"::endian::Endian::from_be_bytes","value":"fn from_be_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44394,"byte_end":44403,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"IndexList","qualname":"::indexed_map::IndexList","value":"IndexList<T>","parent":null,"children":[{"krate":0,"index":378}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44416,"byte_end":44427,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"get_indexes","qualname":"::indexed_map::IndexList::get_indexes","value":"fn get_indexes<'_>(&'_ Self)\n-> Box<dyn Iterator<Item = &'_ dyn Index<T>> + '_>","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44621,"byte_end":44631,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"IndexedMap","qualname":"::indexed_map::IndexedMap","value":"IndexedMap { idx }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" `IndexedMap` works like a `Map` but has a secondary index\n","sig":null,"attributes":[{"value":"/ `IndexedMap` works like a `Map` but has a secondary index","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44548,"byte_end":44609,"line_start":22,"line_end":22,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":386},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44912,"byte_end":44915,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"name":"idx","qualname":"::indexed_map::IndexedMap::idx","value":"I","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" This is meant to be read directly to get the proper types, like:\n map.idx.owner.items(...)\n","sig":null,"attributes":[{"value":"/ This is meant to be read directly to get the proper types, like:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44802,"byte_end":44870,"line_start":31,"line_end":31,"column_start":5,"column_end":73}},{"value":"/ map.idx.owner.items(...)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44875,"byte_end":44903,"line_start":32,"line_end":32,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45132,"byte_end":45135,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexedMap>::new","value":"fn new(&'a str, I) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45352,"byte_end":45355,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"key","qualname":"<IndexedMap>::key","value":"fn key<'_>(&'_ Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45833,"byte_end":45837,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"save","qualname":"<IndexedMap>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, &'_ T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues.\n this must load the old value to update the indexes properly\n if you loaded the old value earlier in the same function, use replace to avoid needless db reads\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45562,"byte_end":45648,"line_start":62,"line_end":62,"column_start":5,"column_end":91}},{"value":"/ this must load the old value to update the indexes properly","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45653,"byte_end":45716,"line_start":63,"line_end":63,"column_start":5,"column_end":68}},{"value":"/ if you loaded the old value earlier in the same function, use replace to avoid needless db reads","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45721,"byte_end":45821,"line_start":64,"line_end":64,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":46048,"byte_end":46054,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexedMap>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage, K) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":46501,"byte_end":46508,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexedMap>::replace","value":"fn replace<'_, '_, '_,\n'_>(&'_ Self, &'_ mut dyn Storage, K, Option<&'_ T>, Option<&'_ T>)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" replace writes data to key. old_data must be the current stored value (from a previous load)\n and is used to properly update the index. This is used by save, replace, and update\n and can be called directly if you want to optimize\n","sig":null,"attributes":[{"value":"/ replace writes data to key. old_data must be the current stored value (from a previous load)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":46242,"byte_end":46338,"line_start":75,"line_end":75,"column_start":5,"column_end":101}},{"value":"/ and is used to properly update the index. This is used by save, replace, and update","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":46343,"byte_end":46430,"line_start":76,"line_end":76,"column_start":5,"column_end":92}},{"value":"/ and can be called directly if you want to optimize","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":46435,"byte_end":46489,"line_start":77,"line_end":77,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":47498,"byte_end":47504,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"update","qualname":"<IndexedMap>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, A) -> Result<T, E>\nwhere A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":47220,"byte_end":47290,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":47295,"byte_end":47381,"line_start":104,"line_end":104,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":47386,"byte_end":47389,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":47394,"byte_end":47486,"line_start":106,"line_end":106,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48139,"byte_end":48143,"line_start":123,"line_end":123,"column_start":12,"column_end":16},"name":"load","qualname":"<IndexedMap>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48044,"byte_end":48127,"line_start":122,"line_end":122,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48399,"byte_end":48407,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"may_load","qualname":"<IndexedMap>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48247,"byte_end":48344,"line_start":127,"line_end":127,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48349,"byte_end":48387,"line_start":128,"line_end":128,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48627,"byte_end":48630,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"has","qualname":"<IndexedMap>::has","value":"fn has<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if storage contains this key, without parsing or interpreting the contents.\n","sig":null,"attributes":[{"value":"/ Returns true if storage contains this key, without parsing or interpreting the contents.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48523,"byte_end":48615,"line_start":133,"line_end":133,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48923,"byte_end":48928,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexedMap>::clear","value":"fn clear<'_, '_>(&'_ Self, &'_ mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.\n","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":48869,"byte_end":48911,"line_start":143,"line_end":143,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":49622,"byte_end":49630,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexedMap>::is_empty","value":"fn is_empty<'_, '_>(&'_ Self, &'_ dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":49571,"byte_end":49610,"line_start":163,"line_end":163,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50420,"byte_end":50436,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<IndexedMap>::prefix_range_raw","value":"fn prefix_range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`\n itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":49995,"byte_end":50086,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50091,"byte_end":50191,"line_start":180,"line_end":180,"column_start":5,"column_end":105}},{"value":"/ itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50196,"byte_end":50289,"line_start":181,"line_end":181,"column_start":5,"column_end":98}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50294,"byte_end":50388,"line_start":182,"line_end":182,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50393,"byte_end":50408,"line_start":183,"line_end":183,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51078,"byte_end":51088,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<IndexedMap>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51230,"byte_end":51236,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IndexedMap>::prefix","value":"fn prefix<'_>(&'_ Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51970,"byte_end":51982,"line_start":230,"line_end":230,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<IndexedMap>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51545,"byte_end":51632,"line_start":224,"line_end":224,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51637,"byte_end":51724,"line_start":225,"line_end":225,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51729,"byte_end":51815,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51820,"byte_end":51839,"line_start":227,"line_end":227,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51844,"byte_end":51938,"line_start":228,"line_end":228,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51943,"byte_end":51958,"line_start":229,"line_end":229,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":52498,"byte_end":52507,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<IndexedMap>::range_raw","value":"fn range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":52853,"byte_end":52861,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<IndexedMap>::keys_raw","value":"fn keys_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":53150,"byte_end":53155,"line_start":271,"line_end":271,"column_start":12,"column_end":17},"name":"range","qualname":"<IndexedMap>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":53512,"byte_end":53516,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexedMap>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":507},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98392,"byte_end":98410,"line_start":17,"line_end":17,"column_start":12,"column_end":30},"name":"IndexedSnapshotMap","qualname":"::indexed_snapshot::IndexedSnapshotMap","value":"IndexedSnapshotMap { idx }","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":" `IndexedSnapshotMap` works like a `SnapshotMap` but has a secondary index\n","sig":null,"attributes":[{"value":"/ `IndexedSnapshotMap` works like a `SnapshotMap` but has a secondary index","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98303,"byte_end":98380,"line_start":16,"line_end":16,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":514},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98604,"byte_end":98607,"line_start":22,"line_end":22,"column_start":9,"column_end":12},"name":"idx","qualname":"::indexed_snapshot::IndexedSnapshotMap::idx","value":"I","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" This is meant to be read directly to get the proper types, like:\n map.idx.owner.items(...)\n","sig":null,"attributes":[{"value":"/ This is meant to be read directly to get the proper types, like:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98494,"byte_end":98562,"line_start":20,"line_end":20,"column_start":5,"column_end":73}},{"value":"/ map.idx.owner.items(...)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98567,"byte_end":98595,"line_start":21,"line_end":21,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99242,"byte_end":99245,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexedSnapshotMap>::new","value":"fn new(&'a str, &'a str, &'a str, Strategy, I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Examples:","sig":null,"attributes":[{"value":"/ Examples:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98671,"byte_end":98684,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98689,"byte_end":98692,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98697,"byte_end":98708,"line_start":28,"line_end":28,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{IndexedSnapshotMap, Strategy, UniqueIndex};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98713,"byte_end":98782,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98787,"byte_end":98790,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ #[derive(PartialEq, Debug, Clone)]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98795,"byte_end":98833,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/ struct Data {","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98838,"byte_end":98855,"line_start":32,"line_end":32,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98860,"byte_end":98885,"line_start":33,"line_end":33,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98890,"byte_end":98911,"line_start":34,"line_end":34,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98916,"byte_end":98921,"line_start":35,"line_end":35,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98926,"byte_end":98929,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ let indexes = UniqueIndex::new(|d: &Data| d.age, \"data__age\");","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98934,"byte_end":99000,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99005,"byte_end":99008,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ IndexedSnapshotMap::<&[u8], Data, UniqueIndex<u32, Data>>::new(","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99013,"byte_end":99080,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/     \"data\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99085,"byte_end":99100,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/     \"checkpoints\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99105,"byte_end":99127,"line_start":41,"line_end":41,"column_start":5,"column_end":27}},{"value":"/     \"changelog\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99132,"byte_end":99152,"line_start":42,"line_end":42,"column_start":5,"column_end":25}},{"value":"/     Strategy::EveryBlock,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99157,"byte_end":99186,"line_start":43,"line_end":43,"column_start":5,"column_end":34}},{"value":"/     indexes,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99191,"byte_end":99207,"line_start":44,"line_end":44,"column_start":5,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99212,"byte_end":99218,"line_start":45,"line_end":45,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99223,"byte_end":99230,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99621,"byte_end":99630,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"changelog","qualname":"<IndexedSnapshotMap>::changelog","value":"fn changelog<'_>(&'_ Self) -> &'_ Map","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99908,"byte_end":99922,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<IndexedSnapshotMap>::add_checkpoint","value":"fn add_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100056,"byte_end":100073,"line_start":76,"line_end":76,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<IndexedSnapshotMap>::remove_checkpoint","value":"fn remove_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100210,"byte_end":100228,"line_start":80,"line_end":80,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<IndexedSnapshotMap>::may_load_at_height","value":"fn may_load_at_height<'_, '_>(&'_ Self, &'_ dyn Storage, K, u64)\n-> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100417,"byte_end":100436,"line_start":89,"line_end":89,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<IndexedSnapshotMap>::assert_checkpointed","value":"fn assert_checkpointed<'_, '_>(&'_ Self, &'_ dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100571,"byte_end":100574,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"key","qualname":"<IndexedSnapshotMap>::key","value":"fn key<'_>(&'_ Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101092,"byte_end":101096,"line_start":107,"line_end":107,"column_start":12,"column_end":16},"name":"save","qualname":"<IndexedSnapshotMap>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, &'_ T, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues.\n this must load the old value to update the indexes properly\n if you loaded the old value earlier in the same function, use replace to avoid needless db reads\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100821,"byte_end":100907,"line_start":104,"line_end":104,"column_start":5,"column_end":91}},{"value":"/ this must load the old value to update the indexes properly","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100912,"byte_end":100975,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/ if you loaded the old value earlier in the same function, use replace to avoid needless db reads","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100980,"byte_end":101080,"line_start":106,"line_end":106,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101328,"byte_end":101334,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexedSnapshotMap>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage, K, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101802,"byte_end":101809,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexedSnapshotMap>::replace","value":"fn replace<'_, '_, '_,\n'_>(&'_ Self, &'_ mut dyn Storage, K, Option<&'_ T>, Option<&'_ T>, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" replace writes data to key. old_data must be the current stored value (from a previous load)\n and is used to properly update the index. This is used by save, replace, and update\n and can be called directly if you want to optimize\n","sig":null,"attributes":[{"value":"/ replace writes data to key. old_data must be the current stored value (from a previous load)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101543,"byte_end":101639,"line_start":117,"line_end":117,"column_start":5,"column_end":101}},{"value":"/ and is used to properly update the index. This is used by save, replace, and update","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101644,"byte_end":101731,"line_start":118,"line_end":118,"column_start":5,"column_end":92}},{"value":"/ and can be called directly if you want to optimize","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":101736,"byte_end":101790,"line_start":119,"line_end":119,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":102837,"byte_end":102843,"line_start":150,"line_end":150,"column_start":12,"column_end":18},"name":"update","qualname":"<IndexedSnapshotMap>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, u64, A)\n-> Result<T, E> where A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":102559,"byte_end":102629,"line_start":146,"line_end":146,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":102634,"byte_end":102720,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":102725,"byte_end":102728,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":102733,"byte_end":102825,"line_start":149,"line_end":149,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103546,"byte_end":103550,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"load","qualname":"<IndexedSnapshotMap>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103451,"byte_end":103534,"line_start":171,"line_end":171,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103806,"byte_end":103814,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"may_load","qualname":"<IndexedSnapshotMap>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103654,"byte_end":103751,"line_start":176,"line_end":176,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103756,"byte_end":103794,"line_start":177,"line_end":177,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":103975,"byte_end":103988,"line_start":183,"line_end":183,"column_start":12,"column_end":25},"name":"no_prefix_raw","qualname":"<IndexedSnapshotMap>::no_prefix_raw","value":"fn no_prefix_raw<'_>(&'_ Self) -> Prefix<Vec<u8>, T, K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":104481,"byte_end":104490,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<IndexedSnapshotMap>::range_raw","value":"fn range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":104836,"byte_end":104844,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<IndexedSnapshotMap>::keys_raw","value":"fn keys_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105311,"byte_end":105321,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<IndexedSnapshotMap>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105463,"byte_end":105469,"line_start":232,"line_end":232,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IndexedSnapshotMap>::prefix","value":"fn prefix<'_>(&'_ Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":106211,"byte_end":106223,"line_start":250,"line_end":250,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<IndexedSnapshotMap>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105786,"byte_end":105873,"line_start":244,"line_end":244,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105878,"byte_end":105965,"line_start":245,"line_end":245,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105970,"byte_end":106056,"line_start":246,"line_end":246,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":106061,"byte_end":106080,"line_start":247,"line_end":247,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":106085,"byte_end":106179,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":106184,"byte_end":106199,"line_start":249,"line_end":249,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":106739,"byte_end":106744,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"range","qualname":"<IndexedSnapshotMap>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":107101,"byte_end":107105,"line_start":282,"line_end":282,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexedSnapshotMap>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":638},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137461,"byte_end":137471,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"MultiIndex","qualname":"::indexes::multi::MultiIndex","value":"MultiIndex {  }","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" MultiIndex stores (namespace, index_name, idx_value, pk) -> b\"pk_len\".\n Allows many values per index, and references pk.\n The associated primary key value is stored in the main (pk_namespace) map,\n which stores (namespace, pk_namespace, pk) -> value.","sig":null,"attributes":[{"value":"/ MultiIndex stores (namespace, index_name, idx_value, pk) -> b\"pk_len\".","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":136795,"byte_end":136869,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ Allows many values per index, and references pk.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":136870,"byte_end":136922,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/ The associated primary key value is stored in the main (pk_namespace) map,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":136923,"byte_end":137001,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ which stores (namespace, pk_namespace, pk) -> value.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137002,"byte_end":137058,"line_start":21,"line_end":21,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137059,"byte_end":137062,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The stored pk_len is used to recover the pk from the index namespace, and perform","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137063,"byte_end":137148,"line_start":23,"line_end":23,"column_start":1,"column_end":86}},{"value":"/ the secondary load of the associated value from the main map.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137149,"byte_end":137214,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137215,"byte_end":137218,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The PK type defines the type of Primary Key, both for deserialization, and","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137219,"byte_end":137297,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ more important, as the type-safe bound key type.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137298,"byte_end":137350,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ This type must match the encompassing `IndexedMap` primary key type,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137351,"byte_end":137423,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/ or its owned variant.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137424,"byte_end":137449,"line_start":29,"line_end":29,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138552,"byte_end":138555,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiIndex>::new","value":"fn new(for<'_, '_> fn(: &'_ [u8], : &'_ T) -> IK, &'a str, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new MultiIndex","sig":null,"attributes":[{"value":"/ Create a new MultiIndex","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137886,"byte_end":137913,"line_start":44,"line_end":44,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137918,"byte_end":137921,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ idx_fn - lambda creating index key from value","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137926,"byte_end":137975,"line_start":46,"line_end":46,"column_start":5,"column_end":54}},{"value":"/ pk_namespace - prefix for the primary key","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137980,"byte_end":138025,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ idx_namespace - prefix for the index value","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138030,"byte_end":138076,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138081,"byte_end":138084,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ## Example:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138089,"byte_end":138104,"line_start":50,"line_end":50,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138109,"byte_end":138112,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138117,"byte_end":138128,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::MultiIndex;","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138133,"byte_end":138169,"line_start":53,"line_end":53,"column_start":5,"column_end":41}},{"value":"/ use serde::{Deserialize, Serialize};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138174,"byte_end":138214,"line_start":54,"line_end":54,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138219,"byte_end":138222,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize, Serialize, Clone)]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138227,"byte_end":138271,"line_start":56,"line_end":56,"column_start":5,"column_end":49}},{"value":"/ struct Data {","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138276,"byte_end":138293,"line_start":57,"line_end":57,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138298,"byte_end":138323,"line_start":58,"line_end":58,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138328,"byte_end":138349,"line_start":59,"line_end":59,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138354,"byte_end":138359,"line_start":60,"line_end":60,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138364,"byte_end":138367,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let index: MultiIndex<_, _, String> = MultiIndex::new(","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138372,"byte_end":138430,"line_start":62,"line_end":62,"column_start":5,"column_end":63}},{"value":"/     |_pk: &[u8], d: &Data| d.age,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138435,"byte_end":138472,"line_start":63,"line_end":63,"column_start":5,"column_end":42}},{"value":"/     \"age\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138477,"byte_end":138491,"line_start":64,"line_end":64,"column_start":5,"column_end":19}},{"value":"/     \"age__owner\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138496,"byte_end":138517,"line_start":65,"line_end":65,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138522,"byte_end":138528,"line_start":66,"line_end":66,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":138533,"byte_end":138540,"line_start":67,"line_end":67,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140316,"byte_end":140320,"line_start":133,"line_end":133,"column_start":8,"column_end":12},"name":"save","qualname":"<MultiIndex as indexes::Index>::save","value":"fn save<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":{"krate":0,"index":867},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140528,"byte_end":140534,"line_start":138,"line_end":138,"column_start":8,"column_end":14},"name":"remove","qualname":"<MultiIndex as indexes::Index>::remove","value":"fn remove<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":{"krate":0,"index":868},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":141346,"byte_end":141355,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"index_key","qualname":"<MultiIndex>::index_key","value":"fn index_key<'_>(&'_ Self, IK) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":142531,"byte_end":142540,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<MultiIndex>::range_raw","value":"fn range_raw<'c>(&'c Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":142875,"byte_end":142883,"line_start":216,"line_end":216,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<MultiIndex>::keys_raw","value":"fn keys_raw<'c>(&'c Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143601,"byte_end":143617,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<MultiIndex>::prefix_range_raw","value":"fn prefix_range_raw<'c>(&'c Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143168,"byte_end":143259,"line_start":226,"line_end":226,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143264,"byte_end":143355,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143360,"byte_end":143446,"line_start":228,"line_end":228,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143451,"byte_end":143470,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143475,"byte_end":143569,"line_start":230,"line_end":230,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":143574,"byte_end":143589,"line_start":231,"line_end":231,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144338,"byte_end":144344,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"prefix","qualname":"<MultiIndex>::prefix","value":"fn prefix<'_>(&'_ Self, IK) -> Prefix<PK, T, PK>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144622,"byte_end":144632,"line_start":266,"line_end":266,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<MultiIndex>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, IK::Prefix) -> Prefix<PK, T, (IK::Suffix, PK)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145577,"byte_end":145589,"line_start":290,"line_end":290,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<MultiIndex>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\n'a:'c, IK: 'c, PK: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145152,"byte_end":145239,"line_start":284,"line_end":284,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145244,"byte_end":145331,"line_start":285,"line_end":285,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145336,"byte_end":145422,"line_start":286,"line_end":286,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145427,"byte_end":145446,"line_start":287,"line_end":287,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145451,"byte_end":145545,"line_start":288,"line_end":288,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":145550,"byte_end":145565,"line_start":289,"line_end":289,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":146112,"byte_end":146117,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"range","qualname":"<MultiIndex>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\nPK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":146490,"byte_end":146494,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"keys","qualname":"<MultiIndex>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<PK::Output>> + 'c>\nwhere T: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148135,"byte_end":148146,"line_start":29,"line_end":29,"column_start":12,"column_end":23},"name":"UniqueIndex","qualname":"::indexes::unique::UniqueIndex","value":"UniqueIndex {  }","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" UniqueIndex stores (namespace, index_name, idx_value) -> {key, value}\n Allows one value per index (i.e. unique) and copies pk and data\n The optional PK type defines the type of Primary Key deserialization.\n","sig":null,"attributes":[{"value":"/ UniqueIndex stores (namespace, index_name, idx_value) -> {key, value}","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":147908,"byte_end":147981,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ Allows one value per index (i.e. unique) and copies pk and data","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":147982,"byte_end":148049,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ The optional PK type defines the type of Primary Key deserialization.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148050,"byte_end":148123,"line_start":28,"line_end":28,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148821,"byte_end":148824,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<UniqueIndex>::new","value":"fn new(for<'_> fn(: &'_ T) -> IK, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new UniqueIndex","sig":null,"attributes":[{"value":"/ Create a new UniqueIndex","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148383,"byte_end":148411,"line_start":38,"line_end":38,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148416,"byte_end":148419,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ idx_fn - lambda creating index key from index value","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148424,"byte_end":148479,"line_start":40,"line_end":40,"column_start":5,"column_end":60}},{"value":"/ idx_namespace - prefix for the index value","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148484,"byte_end":148530,"line_start":41,"line_end":41,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148535,"byte_end":148538,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ## Example:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148543,"byte_end":148558,"line_start":43,"line_end":43,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148563,"byte_end":148566,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148571,"byte_end":148582,"line_start":45,"line_end":45,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::UniqueIndex;","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148587,"byte_end":148624,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148629,"byte_end":148632,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ struct Data {","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148637,"byte_end":148654,"line_start":48,"line_end":48,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148659,"byte_end":148684,"line_start":49,"line_end":49,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148689,"byte_end":148710,"line_start":50,"line_end":50,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148715,"byte_end":148720,"line_start":51,"line_end":51,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148725,"byte_end":148728,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ UniqueIndex::<_, _, ()>::new(|d: &Data| d.age, \"data__age\");","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148733,"byte_end":148797,"line_start":53,"line_end":53,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148802,"byte_end":148809,"line_start":54,"line_end":54,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":149226,"byte_end":149230,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"save","qualname":"<UniqueIndex as indexes::Index>::save","value":"fn save<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":{"krate":0,"index":867},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":149814,"byte_end":149820,"line_start":86,"line_end":86,"column_start":8,"column_end":14},"name":"remove","qualname":"<UniqueIndex as indexes::Index>::remove","value":"fn remove<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":{"krate":0,"index":868},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":150542,"byte_end":150551,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"index_key","qualname":"<UniqueIndex>::index_key","value":"fn index_key<'_>(&'_ Self, IK) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":150987,"byte_end":150991,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"item","qualname":"<UniqueIndex>::item","value":"fn item<'_, '_>(&'_ Self, &'_ dyn Storage, IK) -> StdResult<Option<Record<T>>>","parent":null,"children":[],"decl_id":null,"docs":" returns all items that match this secondary index, always by pk Ascending\n","sig":null,"attributes":[{"value":"/ returns all items that match this secondary index, always by pk Ascending","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":150898,"byte_end":150975,"line_start":126,"line_end":126,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":151565,"byte_end":151574,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<UniqueIndex>::range_raw","value":"fn range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":151894,"byte_end":151902,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<UniqueIndex>::keys_raw","value":"fn keys_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152793,"byte_end":152805,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<UniqueIndex>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\n'a:'c, IK: 'c, PK: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152368,"byte_end":152455,"line_start":175,"line_end":175,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152460,"byte_end":152547,"line_start":176,"line_end":176,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152552,"byte_end":152638,"line_start":177,"line_end":177,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152643,"byte_end":152662,"line_start":178,"line_end":178,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152667,"byte_end":152761,"line_start":179,"line_end":179,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152766,"byte_end":152781,"line_start":180,"line_end":180,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":153344,"byte_end":153349,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"range","qualname":"<UniqueIndex>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\nPK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":153710,"byte_end":153714,"line_start":214,"line_end":214,"column_start":12,"column_end":16},"name":"keys","qualname":"<UniqueIndex>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<PK::Output>> + 'c>\nwhere T: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":154069,"byte_end":154075,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"prefix","qualname":"<UniqueIndex>::prefix","value":"fn prefix<'_>(&'_ Self, IK::Prefix) -> Prefix<PK, T, IK::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":154387,"byte_end":154397,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<UniqueIndex>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, IK::SubPrefix) -> Prefix<PK, T, IK::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":865},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/mod.rs","byte_start":135679,"byte_end":135684,"line_start":16,"line_end":16,"column_start":11,"column_end":16},"name":"Index","qualname":"::indexes::Index","value":"Index<T>","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":868}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/mod.rs","byte_start":135748,"byte_end":135752,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"save","qualname":"::indexes::Index::save","value":"fn save<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/mod.rs","byte_start":135831,"byte_end":135837,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"remove","qualname":"::indexes::Index::remove","value":"fn remove<'_, '_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ [u8], &'_ T)\n-> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":873},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155264,"byte_end":155270,"line_start":7,"line_end":7,"column_start":11,"column_end":17},"name":"IntKey","qualname":"::int_key::IntKey","value":"IntKey: Sized + Copy","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876}],"decl_id":null,"docs":" Our int keys are simply the big-endian representation bytes for unsigned ints,\n but \"sign-flipped\" (xored msb) big-endian bytes for signed ints.","sig":null,"attributes":[{"value":"/ Our int keys are simply the big-endian representation bytes for unsigned ints,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155009,"byte_end":155091,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ but \"sign-flipped\" (xored msb) big-endian bytes for signed ints.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155092,"byte_end":155160,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155161,"byte_end":155164,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ So that the representation of signed integers is in the right lexicographical order.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155165,"byte_end":155253,"line_start":6,"line_end":6,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155296,"byte_end":155299,"line_start":8,"line_end":8,"column_start":10,"column_end":13},"name":"Buf","qualname":"::int_key::IntKey::Buf","value":"type Buf: AsRef<[u8]> + AsMut<[u8]> + Into<Vec<u8>> + Default;","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155362,"byte_end":155373,"line_start":10,"line_end":10,"column_start":8,"column_end":19},"name":"to_cw_bytes","qualname":"::int_key::IntKey::to_cw_bytes","value":"fn to_cw_bytes<'_>(&'_ Self) -> Self::Buf","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155402,"byte_end":155415,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"from_cw_bytes","qualname":"::int_key::IntKey::from_cw_bytes","value":"fn from_cw_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159167,"byte_end":159171,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Item","qualname":"::item::Item","value":"Item {  }","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"decl_id":null,"docs":" Item stores one typed item at the given key.\n This is an analog of Singleton.\n It functions the same way as Path does but doesn't use a Vec and thus has a const fn constructor.\n","sig":null,"attributes":[{"value":"/ Item stores one typed item at the given key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":158969,"byte_end":159017,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ This is an analog of Singleton.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159018,"byte_end":159053,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/ It functions the same way as Path does but doesn't use a Vec and thus has a const fn constructor.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159054,"byte_end":159155,"line_start":13,"line_end":13,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159481,"byte_end":159484,"line_start":22,"line_end":22,"column_start":18,"column_end":21},"name":"new","qualname":"<Item>::new","value":"const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159771,"byte_end":159779,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Item>::as_slice","value":"fn as_slice<'_>(&'_ Self) -> &'_ [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159931,"byte_end":159935,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"save","qualname":"<Item>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159834,"byte_end":159919,"line_start":39,"line_end":39,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160083,"byte_end":160089,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"remove","qualname":"<Item>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160270,"byte_end":160274,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"load","qualname":"<Item>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160175,"byte_end":160258,"line_start":49,"line_end":49,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160568,"byte_end":160576,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Item>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns `Ok(None)` if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns `Ok(None)` if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160414,"byte_end":160513,"line_start":55,"line_end":55,"column_start":5,"column_end":104}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160518,"byte_end":160556,"line_start":56,"line_end":56,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161030,"byte_end":161036,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"update","qualname":"<Item>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, A) -> Result<T, E>\nwhere A: FnOnce(T) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160723,"byte_end":160793,"line_start":62,"line_end":62,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160798,"byte_end":160884,"line_start":63,"line_end":63,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160889,"byte_end":160892,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ It assumes, that data was initialized before, and if it doesn't exist, `Err(StdError::NotFound)`","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":160897,"byte_end":160997,"line_start":65,"line_end":65,"column_start":5,"column_end":105}},{"value":"/ is returned.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161002,"byte_end":161018,"line_start":66,"line_end":66,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161596,"byte_end":161601,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"query","qualname":"<Item>::query","value":"fn query<Q, '_, '_, '_>(&'_ Self, &'_ QuerierWrapper, Addr) -> StdResult<T>\nwhere Q: CustomQuery","parent":null,"children":[],"decl_id":null,"docs":" If you import the proper Item from the remote contract, this will let you read the data\n from a remote contract in a type-safe way using WasmQuery::RawQuery.","sig":null,"attributes":[{"value":"/ If you import the proper Item from the remote contract, this will let you read the data","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161325,"byte_end":161416,"line_start":78,"line_end":78,"column_start":5,"column_end":96}},{"value":"/ from a remote contract in a type-safe way using WasmQuery::RawQuery.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161421,"byte_end":161493,"line_start":79,"line_end":79,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161498,"byte_end":161501,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that we expect an Item to be set, and error if there is no data there","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":161506,"byte_end":161584,"line_start":81,"line_end":81,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2054},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176371,"byte_end":176374,"line_start":9,"line_end":9,"column_start":5,"column_end":8},"name":"Ref","qualname":"::keys::Key::Ref","value":"Key::Ref(&'a [u8])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2056},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176375,"byte_end":176383,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"name":"0","qualname":"::keys::Key::Ref::0","value":"&'a [u8]","parent":{"krate":0,"index":2054},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176390,"byte_end":176394,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"name":"Val8","qualname":"::keys::Key::Val8","value":"Key::Val8([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2059},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176395,"byte_end":176402,"line_start":10,"line_end":10,"column_start":10,"column_end":17},"name":"0","qualname":"::keys::Key::Val8::0","value":"[u8; 1]","parent":{"krate":0,"index":2057},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176409,"byte_end":176414,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"name":"Val16","qualname":"::keys::Key::Val16","value":"Key::Val16([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2063},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176415,"byte_end":176422,"line_start":11,"line_end":11,"column_start":11,"column_end":18},"name":"0","qualname":"::keys::Key::Val16::0","value":"[u8; 2]","parent":{"krate":0,"index":2061},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176429,"byte_end":176434,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Val32","qualname":"::keys::Key::Val32","value":"Key::Val32([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2067},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176435,"byte_end":176442,"line_start":12,"line_end":12,"column_start":11,"column_end":18},"name":"0","qualname":"::keys::Key::Val32::0","value":"[u8; 4]","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176449,"byte_end":176454,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Val64","qualname":"::keys::Key::Val64","value":"Key::Val64([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2071},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176455,"byte_end":176462,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"0","qualname":"::keys::Key::Val64::0","value":"[u8; 8]","parent":{"krate":0,"index":2069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176469,"byte_end":176475,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Val128","qualname":"::keys::Key::Val128","value":"Key::Val128([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2075},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176476,"byte_end":176484,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"0","qualname":"::keys::Key::Val128::0","value":"[u8; 16]","parent":{"krate":0,"index":2073},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2052},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176357,"byte_end":176360,"line_start":8,"line_end":8,"column_start":10,"column_end":13},"name":"Key","qualname":"::keys::Key","value":"enum Key<'a> {\n    Ref(&'a [u8]),\n    Val8([u8; ]),\n    Val16([u8; ]),\n    Val32([u8; ]),\n    Val64([u8; ]),\n    Val128([u8; ]),\n}","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2061},{"krate":0,"index":2065},{"krate":0,"index":2069},{"krate":0,"index":2073}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176532,"byte_end":176538,"line_start":18,"line_end":18,"column_start":8,"column_end":14},"name":"as_ref","qualname":"<Key as std::convert::AsRef>::as_ref","value":"fn as_ref<'_>(&'_ Self) -> &'_ [u8]","parent":{"krate":2,"index":3160},"children":[],"decl_id":{"krate":2,"index":3162},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176834,"byte_end":176836,"line_start":31,"line_end":31,"column_start":8,"column_end":10},"name":"eq","qualname":"<Key as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_, '_>(&'_ Self, &'_ &'_ [u8]) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":990},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177724,"byte_end":177734,"line_start":55,"line_end":55,"column_start":11,"column_end":21},"name":"PrimaryKey","qualname":"::keys::PrimaryKey","value":"PrimaryKey<'a>: Clone","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"decl_id":null,"docs":" `PrimaryKey` needs to be implemented for types that want to be a `Map` (or `Map`-like) key,\n or part of a key.","sig":null,"attributes":[{"value":"/ `PrimaryKey` needs to be implemented for types that want to be a `Map` (or `Map`-like) key,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176910,"byte_end":177005,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/ or part of a key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177006,"byte_end":177027,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177028,"byte_end":177031,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In particular, it defines a series of types that help iterating over parts of a (composite) key:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177032,"byte_end":177132,"line_start":39,"line_end":39,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177133,"byte_end":177136,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `Prefix`: Prefix is eager. That is, except for empty keys, it's always \"one less\" than the full key.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177137,"byte_end":177241,"line_start":41,"line_end":41,"column_start":1,"column_end":105}},{"value":"/ `Suffix`: Suffix is the complement of prefix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177242,"byte_end":177291,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/ `SubPrefix`: Sub-prefix is \"one less\" than prefix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177292,"byte_end":177346,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/ `SuperSuffix`: Super-suffix is \"one more\" than suffix. The complement of sub-prefix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177347,"byte_end":177435,"line_start":44,"line_end":44,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177436,"byte_end":177439,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ By example, for a 2-tuple `(T, U)`:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177440,"byte_end":177479,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177480,"byte_end":177483,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ `T`: Prefix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177484,"byte_end":177500,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/ `U`: Suffix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177501,"byte_end":177517,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/ `()`: Sub-prefix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177518,"byte_end":177539,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/ `(T, U)`: Super-suffix.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177540,"byte_end":177567,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177568,"byte_end":177571,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ `SubPrefix` and `SuperSuffix` only make real sense in the case of triples. Still, they need to be","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177572,"byte_end":177673,"line_start":53,"line_end":53,"column_start":1,"column_end":102}},{"value":"/ consistently defined for all types.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177674,"byte_end":177713,"line_start":54,"line_end":54,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":992},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177934,"byte_end":177940,"line_start":58,"line_end":58,"column_start":10,"column_end":16},"name":"Prefix","qualname":"::keys::PrimaryKey::Prefix","value":"type Prefix: Prefixer<'a>;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" These associated types need to implement `Prefixer`, so that they can be useful arguments\n for `prefix()`, `sub_prefix()`, and their key-deserializable variants.\n","sig":null,"attributes":[{"value":"/ These associated types need to implement `Prefixer`, so that they can be useful arguments","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177752,"byte_end":177845,"line_start":56,"line_end":56,"column_start":5,"column_end":98}},{"value":"/ for `prefix()`, `sub_prefix()`, and their key-deserializable variants.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177850,"byte_end":177924,"line_start":57,"line_end":57,"column_start":5,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":993},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177965,"byte_end":177974,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"SubPrefix","qualname":"::keys::PrimaryKey::SubPrefix","value":"type SubPrefix: Prefixer<'a>;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":994},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178135,"byte_end":178141,"line_start":63,"line_end":63,"column_start":10,"column_end":16},"name":"Suffix","qualname":"::keys::PrimaryKey::Suffix","value":"type Suffix: KeyDeserialize;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" These associated types need to implement `KeyDeserialize`, so that they can be returned from\n `range_de()` and friends.\n","sig":null,"attributes":[{"value":"/ These associated types need to implement `KeyDeserialize`, so that they can be returned from","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177995,"byte_end":178091,"line_start":61,"line_end":61,"column_start":5,"column_end":101}},{"value":"/ `range_de()` and friends.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178096,"byte_end":178125,"line_start":62,"line_end":62,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":995},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178168,"byte_end":178179,"line_start":64,"line_end":64,"column_start":10,"column_end":21},"name":"SuperSuffix","qualname":"::keys::PrimaryKey::SuperSuffix","value":"type SuperSuffix: KeyDeserialize;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178276,"byte_end":178279,"line_start":67,"line_end":67,"column_start":8,"column_end":11},"name":"key","qualname":"::keys::PrimaryKey::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" returns a slice of key steps, which can be optionally combined\n","sig":null,"attributes":[{"value":"/ returns a slice of key steps, which can be optionally combined","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178202,"byte_end":178268,"line_start":66,"line_end":66,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178308,"byte_end":178318,"line_start":69,"line_end":69,"column_start":8,"column_end":18},"name":"joined_key","qualname":"::keys::PrimaryKey::joined_key","value":"fn joined_key<'_>(&'_ Self) -> Vec<u8>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178558,"byte_end":178574,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"joined_extra_key","qualname":"::keys::PrimaryKey::joined_extra_key","value":"fn joined_extra_key<'_, '_>(&'_ Self, &'_ [u8]) -> Vec<u8>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":178902,"byte_end":178905,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"key","qualname":"<() as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":179098,"byte_end":179101,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"key","qualname":"<&'a [u8] as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":179419,"byte_end":179422,"line_start":115,"line_end":115,"column_start":8,"column_end":11},"name":"key","qualname":"<&'a str as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":179857,"byte_end":179860,"line_start":130,"line_end":130,"column_start":8,"column_end":11},"name":"key","qualname":"<(T, U) as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180364,"byte_end":180367,"line_start":150,"line_end":150,"column_start":8,"column_end":11},"name":"key","qualname":"<(T, U, V) as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1039},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180528,"byte_end":180536,"line_start":158,"line_end":158,"column_start":11,"column_end":19},"name":"Prefixer","qualname":"::keys::Prefixer","value":"Prefixer<'a>","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180654,"byte_end":180660,"line_start":160,"line_end":160,"column_start":8,"column_end":14},"name":"prefix","qualname":"::keys::Prefixer::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":" returns 0 or more namespaces that should be length-prefixed and concatenated for range searches\n","sig":null,"attributes":[{"value":"/ returns 0 or more namespaces that should be length-prefixed and concatenated for range searches","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180547,"byte_end":180646,"line_start":159,"line_end":159,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180689,"byte_end":180702,"line_start":162,"line_end":162,"column_start":8,"column_end":21},"name":"joined_prefix","qualname":"::keys::Prefixer::joined_prefix","value":"fn joined_prefix<'_>(&'_ Self) -> Vec<u8>","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180896,"byte_end":180902,"line_start":169,"line_end":169,"column_start":8,"column_end":14},"name":"prefix","qualname":"<() as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":180992,"byte_end":180998,"line_start":175,"line_end":175,"column_start":8,"column_end":14},"name":"prefix","qualname":"<&'a [u8] as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181134,"byte_end":181140,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"prefix","qualname":"<(T, U) as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181367,"byte_end":181373,"line_start":189,"line_end":189,"column_start":8,"column_end":14},"name":"prefix","qualname":"<(T, U, V) as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181654,"byte_end":181660,"line_start":199,"line_end":199,"column_start":8,"column_end":14},"name":"prefix","qualname":"<&'a str as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181877,"byte_end":181880,"line_start":210,"line_end":210,"column_start":8,"column_end":11},"name":"key","qualname":"<Vec<u8> as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181983,"byte_end":181989,"line_start":216,"line_end":216,"column_start":8,"column_end":14},"name":"prefix","qualname":"<Vec<u8> as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182203,"byte_end":182206,"line_start":227,"line_end":227,"column_start":8,"column_end":11},"name":"key","qualname":"<String as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182319,"byte_end":182325,"line_start":233,"line_end":233,"column_start":8,"column_end":14},"name":"prefix","qualname":"<String as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182609,"byte_end":182612,"line_start":245,"line_end":245,"column_start":8,"column_end":11},"name":"key","qualname":"<&'a Addr as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182790,"byte_end":182796,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"prefix","qualname":"<&'a Addr as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":183029,"byte_end":183032,"line_start":264,"line_end":264,"column_start":8,"column_end":11},"name":"key","qualname":"<Addr as keys::PrimaryKey>::key","value":"fn key<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":{"krate":0,"index":996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":183197,"byte_end":183203,"line_start":271,"line_end":271,"column_start":8,"column_end":14},"name":"prefix","qualname":"<Addr as keys::Prefixer>::prefix","value":"fn prefix<'_>(&'_ Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":{"krate":0,"index":1041},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2180},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191250,"byte_end":191253,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191521,"byte_end":191524,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<Map>::new","value":"const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191713,"byte_end":191722,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"namespace","qualname":"<Map>::namespace","value":"fn namespace<'_>(&'_ Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191884,"byte_end":191887,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"key","qualname":"<Map>::key","value":"fn key<'_>(&'_ Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192202,"byte_end":192206,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"save","qualname":"<Map>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, &'_ T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192330,"byte_end":192336,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage, K)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192517,"byte_end":192521,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"load","qualname":"<Map>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192422,"byte_end":192505,"line_start":67,"line_end":67,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192769,"byte_end":192777,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Map>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192617,"byte_end":192714,"line_start":72,"line_end":72,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192719,"byte_end":192757,"line_start":73,"line_end":73,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193008,"byte_end":193011,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"fn has<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" has returns true or false if any data is at this key, without parsing or interpreting the\n contents.\n","sig":null,"attributes":[{"value":"/ has returns true or false if any data is at this key, without parsing or interpreting the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192885,"byte_end":192978,"line_start":78,"line_end":78,"column_start":5,"column_end":98}},{"value":"/ contents.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":192983,"byte_end":192996,"line_start":79,"line_end":79,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193376,"byte_end":193382,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"name":"update","qualname":"<Map>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, A) -> Result<T, E>\nwhere A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193098,"byte_end":193168,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193173,"byte_end":193259,"line_start":85,"line_end":85,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193264,"byte_end":193267,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193272,"byte_end":193364,"line_start":87,"line_end":87,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193774,"byte_end":193779,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"query","qualname":"<Map>::query","value":"fn query<Q, '_, '_, '_>(&'_ Self, &'_ QuerierWrapper, Addr, K)\n-> StdResult<Option<T>> where Q: CustomQuery","parent":null,"children":[],"decl_id":null,"docs":" If you import the proper Map from the remote contract, this will let you read the data\n from a remote contract in a type-safe way using WasmQuery::RawQuery\n","sig":null,"attributes":[{"value":"/ If you import the proper Map from the remote contract, this will let you read the data","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193596,"byte_end":193686,"line_start":96,"line_end":96,"column_start":5,"column_end":95}},{"value":"/ from a remote contract in a type-safe way using WasmQuery::RawQuery","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":193691,"byte_end":193762,"line_start":97,"line_end":97,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194259,"byte_end":194264,"line_start":115,"line_end":115,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"fn clear<'_, '_>(&'_ Self, &'_ mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.\n","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194172,"byte_end":194214,"line_start":113,"line_end":113,"column_start":5,"column_end":47}},{"value":"cfg(feature = \"iterator\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194219,"byte_end":194247,"line_start":114,"line_end":114,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194988,"byte_end":194996,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map>::is_empty","value":"fn is_empty<'_, '_>(&'_ Self, &'_ dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194904,"byte_end":194943,"line_start":134,"line_end":134,"column_start":5,"column_end":44}},{"value":"cfg(feature = \"iterator\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":194948,"byte_end":194976,"line_start":135,"line_end":135,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195326,"byte_end":195336,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<Map>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195475,"byte_end":195481,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"prefix","qualname":"<Map>::prefix","value":"fn prefix<'_>(&'_ Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196323,"byte_end":196339,"line_start":173,"line_end":173,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<Map>::prefix_range_raw","value":"fn prefix_range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`\n itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195898,"byte_end":195989,"line_start":168,"line_end":168,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195994,"byte_end":196094,"line_start":169,"line_end":169,"column_start":5,"column_end":105}},{"value":"/ itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196099,"byte_end":196192,"line_start":170,"line_end":170,"column_start":5,"column_end":98}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196197,"byte_end":196291,"line_start":171,"line_end":171,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196296,"byte_end":196311,"line_start":172,"line_end":172,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197371,"byte_end":197383,"line_start":202,"line_end":202,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<Map>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196946,"byte_end":197033,"line_start":196,"line_end":196,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197038,"byte_end":197125,"line_start":197,"line_end":197,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197130,"byte_end":197216,"line_start":198,"line_end":198,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197221,"byte_end":197240,"line_start":199,"line_end":199,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197245,"byte_end":197339,"line_start":200,"line_end":200,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":197344,"byte_end":197359,"line_start":201,"line_end":201,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198117,"byte_end":198126,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<Map>::range_raw","value":"fn range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198472,"byte_end":198480,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<Map>::keys_raw","value":"fn keys_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198943,"byte_end":198948,"line_start":264,"line_end":264,"column_start":12,"column_end":17},"name":"range","qualname":"<Map>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":199305,"byte_end":199309,"line_start":278,"line_end":278,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":241800,"byte_end":241804,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Path","qualname":"::path::Path","value":"Path {  }","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242202,"byte_end":242207,"line_start":27,"line_end":27,"column_start":8,"column_end":13},"name":"deref","qualname":"<Path<T> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ [u8]","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242333,"byte_end":242336,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Path<T>>::new","value":"fn new<'_, '_, '_>(&'_ [u8], &'_ [&'_ [u8]]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242887,"byte_end":242891,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"save","qualname":"<Path<T>>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242790,"byte_end":242875,"line_start":53,"line_end":53,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243040,"byte_end":243046,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"remove","qualname":"<Path<T>>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243228,"byte_end":243232,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"load","qualname":"<Path<T>>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243133,"byte_end":243216,"line_start":63,"line_end":63,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243525,"byte_end":243533,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Path<T>>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243373,"byte_end":243470,"line_start":69,"line_end":69,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243475,"byte_end":243513,"line_start":70,"line_end":70,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243900,"byte_end":243903,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"has","qualname":"<Path<T>>::has","value":"fn has<'_, '_>(&'_ Self, &'_ dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" has returns true or false if any data is at this key, without parsing or interpreting the\n contents. It will returns true for an length-0 byte array (Some(b\"\")), if you somehow manage to set that.\n","sig":null,"attributes":[{"value":"/ has returns true or false if any data is at this key, without parsing or interpreting the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243681,"byte_end":243774,"line_start":76,"line_end":76,"column_start":5,"column_end":98}},{"value":"/ contents. It will returns true for an length-0 byte array (Some(b\"\")), if you somehow manage to set that.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":243779,"byte_end":243888,"line_start":77,"line_end":77,"column_start":5,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":244278,"byte_end":244284,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"update","qualname":"<Path<T>>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, A) -> Result<T, E>\nwhere A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":244000,"byte_end":244070,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":244075,"byte_end":244161,"line_start":83,"line_end":83,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":244166,"byte_end":244169,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":244174,"byte_end":244266,"line_start":85,"line_end":85,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":2207},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":245635,"byte_end":245641,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"Prefix","qualname":"::prefix::Prefix","value":"Prefix {  }","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246197,"byte_end":246202,"line_start":59,"line_end":59,"column_start":8,"column_end":13},"name":"deref","qualname":"<Prefix<K, T> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ [u8]","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246368,"byte_end":246371,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Prefix<K, T, B>>::new","value":"fn new<'_, '_, '_>(&'_ [u8], &'_ [Key]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246637,"byte_end":246667,"line_start":79,"line_end":79,"column_start":12,"column_end":42},"name":"with_deserialization_functions","qualname":"<Prefix<K, T, B>>::with_deserialization_functions","value":"fn with_deserialization_functions<'_, '_, '_,\n'_>(&'_ [u8], &'_ [Key], &'_ [u8], DeserializeKvFn<K, T>, DeserializeVFn<T>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":247237,"byte_end":247246,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<Prefix<K, T, B>>::range_raw","value":"fn range_raw<'a,\n'_>(&'_ Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'a> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":247866,"byte_end":247874,"line_start":126,"line_end":126,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<Prefix<K, T, B>>::keys_raw","value":"fn keys_raw<'a,\n'_>(&'_ Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = Vec<u8>> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":248346,"byte_end":248351,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"range","qualname":"<Prefix<K, T, B>>::range","value":"fn range<'a,\n'_>(&'_ Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'a> where T: 'a,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":249005,"byte_end":249009,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"keys","qualname":"<Prefix<K, T, B>>::keys","value":"fn keys<'a,\n'_>(&'_ Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<K::Output>> + 'a> where T: 'a,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1410},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":249672,"byte_end":249689,"line_start":193,"line_end":193,"column_start":8,"column_end":25},"name":"range_with_prefix","qualname":"::prefix::range_with_prefix","value":"fn range_with_prefix<'a,\n'_>(&'a dyn Storage, &'_ [u8], Option<RawBound>, Option<RawBound>, Order)\n-> Box<dyn Iterator<Item = Record> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1465},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272558,"byte_end":272570,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"SnapshotItem","qualname":"::snapshot::item::SnapshotItem","value":"SnapshotItem {  }","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470}],"decl_id":null,"docs":" Item that maintains a snapshot of one or more checkpoints.\n We can query historical data as well as current state.\n What data is snapshotted depends on the Strategy.\n","sig":null,"attributes":[{"value":"/ Item that maintains a snapshot of one or more checkpoints.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272371,"byte_end":272433,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ We can query historical data as well as current state.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272434,"byte_end":272492,"line_start":10,"line_end":10,"column_start":1,"column_end":59}},{"value":"/ What data is snapshotted depends on the Strategy.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272493,"byte_end":272546,"line_start":11,"line_end":11,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273002,"byte_end":273005,"line_start":30,"line_end":30,"column_start":18,"column_end":21},"name":"new","qualname":"<SnapshotItem>::new","value":"const fn new(&'a str, &'a str, &'a str, Strategy) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Example:","sig":null,"attributes":[{"value":"/ Example:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272717,"byte_end":272729,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272734,"byte_end":272737,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272742,"byte_end":272753,"line_start":21,"line_end":21,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{SnapshotItem, Strategy};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272758,"byte_end":272808,"line_start":22,"line_end":22,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272813,"byte_end":272816,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ SnapshotItem::<'static, u64>::new(","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272821,"byte_end":272859,"line_start":24,"line_end":24,"column_start":5,"column_end":43}},{"value":"/     \"every\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272864,"byte_end":272880,"line_start":25,"line_end":25,"column_start":5,"column_end":21}},{"value":"/     \"every__check\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272885,"byte_end":272908,"line_start":26,"line_end":26,"column_start":5,"column_end":28}},{"value":"/     \"every__change\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272913,"byte_end":272937,"line_start":27,"line_end":27,"column_start":5,"column_end":29}},{"value":"/     Strategy::EveryBlock);","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272942,"byte_end":272972,"line_start":28,"line_end":28,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272977,"byte_end":272984,"line_start":29,"line_end":29,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273351,"byte_end":273365,"line_start":43,"line_end":43,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<SnapshotItem>::add_checkpoint","value":"fn add_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273501,"byte_end":273518,"line_start":47,"line_end":47,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<SnapshotItem>::remove_checkpoint","value":"fn remove_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273657,"byte_end":273666,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"changelog","qualname":"<SnapshotItem>::changelog","value":"fn changelog<'_>(&'_ Self) -> Map","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":274399,"byte_end":274403,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"save","qualname":"<SnapshotItem>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, &'_ T, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":274651,"byte_end":274657,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"remove","qualname":"<SnapshotItem>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":274978,"byte_end":274982,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"load","qualname":"<SnapshotItem>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":274900,"byte_end":274966,"line_start":87,"line_end":87,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275214,"byte_end":275222,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"may_load","qualname":"<SnapshotItem>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored if present, returns Ok(None) if no data there.\n returns an error on parsing issues\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275073,"byte_end":275159,"line_start":92,"line_end":92,"column_start":5,"column_end":91}},{"value":"/ returns an error on parsing issues","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275164,"byte_end":275202,"line_start":93,"line_end":93,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275332,"byte_end":275350,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<SnapshotItem>::may_load_at_height","value":"fn may_load_at_height<'_, '_>(&'_ Self, &'_ dyn Storage, u64)\n-> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275760,"byte_end":275779,"line_start":110,"line_end":110,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<SnapshotItem>::assert_checkpointed","value":"fn assert_checkpointed<'_, '_>(&'_ Self, &'_ dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276305,"byte_end":276311,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotItem>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, u64, A) -> Result<T, E>\nwhere A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result in the database.\n This is a shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result in the database.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":275909,"byte_end":275996,"line_start":114,"line_end":114,"column_start":5,"column_end":92}},{"value":"/ This is a shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276001,"byte_end":276072,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276077,"byte_end":276080,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276085,"byte_end":276177,"line_start":117,"line_end":117,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276182,"byte_end":276185,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This is a bit more customized than needed to only read \"old\" value 1 time, not 2 per naive approach","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":276190,"byte_end":276293,"line_start":119,"line_end":119,"column_start":5,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283606,"byte_end":283617,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"SnapshotMap","qualname":"::snapshot::map::SnapshotMap","value":"SnapshotMap {  }","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1555}],"decl_id":null,"docs":" Map that maintains a snapshots of one or more checkpoints.\n We can query historical data as well as current state.\n What data is snapshotted depends on the Strategy.\n","sig":null,"attributes":[{"value":"/ Map that maintains a snapshots of one or more checkpoints.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283419,"byte_end":283481,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/ We can query historical data as well as current state.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283482,"byte_end":283540,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ What data is snapshotted depends on the Strategy.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283541,"byte_end":283594,"line_start":18,"line_end":18,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284030,"byte_end":284033,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"new","qualname":"<SnapshotMap>::new","value":"const fn new(&'a str, &'a str, &'a str, Strategy) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Example:","sig":null,"attributes":[{"value":"/ Example:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283739,"byte_end":283751,"line_start":25,"line_end":25,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283756,"byte_end":283759,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283764,"byte_end":283775,"line_start":27,"line_end":27,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{SnapshotMap, Strategy};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283780,"byte_end":283829,"line_start":28,"line_end":28,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283834,"byte_end":283837,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ SnapshotMap::<&[u8], &str>::new(","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283842,"byte_end":283878,"line_start":30,"line_end":30,"column_start":5,"column_end":41}},{"value":"/     \"never\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283883,"byte_end":283899,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/     \"never__check\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283904,"byte_end":283927,"line_start":32,"line_end":32,"column_start":5,"column_end":28}},{"value":"/     \"never__change\",","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283932,"byte_end":283956,"line_start":33,"line_end":33,"column_start":5,"column_end":29}},{"value":"/     Strategy::EveryBlock","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283961,"byte_end":283989,"line_start":34,"line_end":34,"column_start":5,"column_end":33}},{"value":"/ );","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283994,"byte_end":284000,"line_start":35,"line_end":35,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284005,"byte_end":284012,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284315,"byte_end":284324,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"changelog","qualname":"<SnapshotMap>::changelog","value":"fn changelog<'_>(&'_ Self) -> &'_ Map","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284552,"byte_end":284566,"line_start":59,"line_end":59,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<SnapshotMap>::add_checkpoint","value":"fn add_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284702,"byte_end":284719,"line_start":63,"line_end":63,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<SnapshotMap>::remove_checkpoint","value":"fn remove_checkpoint<'_, '_>(&'_ Self, &'_ mut dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":285005,"byte_end":285008,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"key","qualname":"<SnapshotMap>::key","value":"fn key<'_>(&'_ Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":285690,"byte_end":285694,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"save","qualname":"<SnapshotMap>::save","value":"fn save<'_, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, &'_ T, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":285961,"byte_end":285967,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"remove","qualname":"<SnapshotMap>::remove","value":"fn remove<'_, '_>(&'_ Self, &'_ mut dyn Storage, K, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286324,"byte_end":286328,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"load","qualname":"<SnapshotMap>::load","value":"fn load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286229,"byte_end":286312,"line_start":107,"line_end":107,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286580,"byte_end":286588,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"may_load","qualname":"<SnapshotMap>::may_load","value":"fn may_load<'_, '_>(&'_ Self, &'_ dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286428,"byte_end":286525,"line_start":112,"line_end":112,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286530,"byte_end":286568,"line_start":113,"line_end":113,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":286707,"byte_end":286725,"line_start":118,"line_end":118,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<SnapshotMap>::may_load_at_height","value":"fn may_load_at_height<'_, '_>(&'_ Self, &'_ dyn Storage, K, u64)\n-> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287132,"byte_end":287151,"line_start":136,"line_end":136,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<SnapshotMap>::assert_checkpointed","value":"fn assert_checkpointed<'_, '_>(&'_ Self, &'_ dyn Storage, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287675,"byte_end":287681,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotMap>::update","value":"fn update<A, E, '_, '_>(&'_ Self, &'_ mut dyn Storage, K, u64, A)\n-> Result<T, E> where A: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287281,"byte_end":287351,"line_start":140,"line_end":140,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287356,"byte_end":287442,"line_start":141,"line_end":141,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287447,"byte_end":287450,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287455,"byte_end":287547,"line_start":143,"line_end":143,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287552,"byte_end":287555,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ This is a bit more customized than needed to only read \"old\" value 1 time, not 2 per naive approach","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":287560,"byte_end":287663,"line_start":145,"line_end":145,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":288439,"byte_end":288448,"line_start":172,"line_end":172,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<SnapshotMap>::range_raw","value":"fn range_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":288794,"byte_end":288802,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<SnapshotMap>::keys_raw","value":"fn keys_raw<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289691,"byte_end":289703,"line_start":211,"line_end":211,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<SnapshotMap>::prefix_range","value":"fn prefix_range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<PrefixBound>, Option<PrefixBound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289266,"byte_end":289353,"line_start":205,"line_end":205,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289358,"byte_end":289445,"line_start":206,"line_end":206,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289450,"byte_end":289536,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289541,"byte_end":289560,"line_start":208,"line_end":208,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289565,"byte_end":289659,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289664,"byte_end":289679,"line_start":210,"line_end":210,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":290226,"byte_end":290231,"line_start":229,"line_end":229,"column_start":12,"column_end":17},"name":"range","qualname":"<SnapshotMap>::range","value":"fn range<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":290588,"byte_end":290592,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"keys","qualname":"<SnapshotMap>::keys","value":"fn keys<'c,\n'_>(&'_ Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":290943,"byte_end":290949,"line_start":257,"line_end":257,"column_start":12,"column_end":18},"name":"prefix","qualname":"<SnapshotMap>::prefix","value":"fn prefix<'_>(&'_ Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":291085,"byte_end":291095,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<SnapshotMap>::sub_prefix","value":"fn sub_prefix<'_>(&'_ Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2239},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":263871,"byte_end":263881,"line_start":165,"line_end":165,"column_start":5,"column_end":15},"name":"EveryBlock","qualname":"::snapshot::Strategy::EveryBlock","value":"Strategy::EveryBlock","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2241},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":263887,"byte_end":263892,"line_start":166,"line_end":166,"column_start":5,"column_end":10},"name":"Never","qualname":"::snapshot::Strategy::Never","value":"Strategy::Never","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264231,"byte_end":264239,"line_start":172,"line_end":172,"column_start":5,"column_end":13},"name":"Selected","qualname":"::snapshot::Strategy::Selected","value":"Strategy::Selected","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":" Only writes for linked blocks - does a few more reads to save some writes.\n Probably uses more gas, but less total disk usage.","sig":null,"attributes":[{"value":"/ Only writes for linked blocks - does a few more reads to save some writes.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":263898,"byte_end":263976,"line_start":167,"line_end":167,"column_start":5,"column_end":83}},{"value":"/ Probably uses more gas, but less total disk usage.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":263981,"byte_end":264035,"line_start":168,"line_end":168,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264040,"byte_end":264043,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Note that you need a trusted source (eg. own contract) to set/remove checkpoints.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264048,"byte_end":264133,"line_start":170,"line_end":170,"column_start":5,"column_end":90}},{"value":"/ Useful when the checkpoint setting happens in the same contract as the snapshotting.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264138,"byte_end":264226,"line_start":171,"line_end":171,"column_start":5,"column_end":93}}]},{"kind":"Enum","id":{"krate":0,"index":2238},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":263856,"byte_end":263864,"line_start":164,"line_end":164,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::snapshot::Strategy","value":"enum Strategy { EveryBlock, Never, Selected, }","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264324,"byte_end":264333,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"ChangeSet","qualname":"::snapshot::ChangeSet","value":"ChangeSet { old }","parent":null,"children":[{"krate":0,"index":2305}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2305},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":264347,"byte_end":264350,"line_start":177,"line_end":177,"column_start":9,"column_end":12},"name":"old","qualname":"::snapshot::ChangeSet::old","value":"std::option::Option<T>","parent":{"krate":0,"index":2303},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2442,"byte_end":2447,"line_start":32,"line_end":32,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3245,"byte_end":3256,"line_start":57,"line_end":57,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5390,"byte_end":5396,"line_start":135,"line_end":135,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5629,"byte_end":5632,"line_start":144,"line_end":144,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":6110,"byte_end":6114,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7293,"byte_end":7296,"line_start":27,"line_end":27,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7808,"byte_end":7814,"line_start":54,"line_end":54,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8404,"byte_end":8408,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15028,"byte_end":15036,"line_start":24,"line_end":24,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15248,"byte_end":15256,"line_start":33,"line_end":33,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21232,"byte_end":21240,"line_start":200,"line_end":200,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21755,"byte_end":21767,"line_start":223,"line_end":223,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":23057,"byte_end":23069,"line_start":265,"line_end":265,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44941,"byte_end":44951,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45437,"byte_end":45447,"line_start":56,"line_end":56,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":49870,"byte_end":49880,"line_start":173,"line_end":173,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50946,"byte_end":50956,"line_start":202,"line_end":202,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51403,"byte_end":51413,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98633,"byte_end":98651,"line_start":25,"line_end":25,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99736,"byte_end":99754,"line_start":66,"line_end":66,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100656,"byte_end":100674,"line_start":98,"line_end":98,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":104163,"byte_end":104181,"line_start":189,"line_end":189,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105171,"byte_end":105189,"line_start":222,"line_end":222,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105636,"byte_end":105654,"line_start":238,"line_end":238,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137769,"byte_end":137779,"line_start":39,"line_end":39,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140206,"byte_end":140216,"line_start":128,"line_end":128,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140763,"byte_end":140773,"line_start":145,"line_end":145,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":141176,"byte_end":141186,"line_start":161,"line_end":161,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":142198,"byte_end":142208,"line_start":195,"line_end":195,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144168,"byte_end":144178,"line_start":250,"line_end":250,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144972,"byte_end":144982,"line_start":278,"line_end":278,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148316,"byte_end":148327,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":149115,"byte_end":149126,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":150427,"byte_end":150438,"line_start":107,"line_end":107,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":151304,"byte_end":151315,"line_start":137,"line_end":137,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152219,"byte_end":152230,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159450,"byte_end":159454,"line_start":21,"line_end":21,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159648,"byte_end":159652,"line_start":30,"line_end":30,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176515,"byte_end":176518,"line_start":17,"line_end":17,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176817,"byte_end":176820,"line_start":30,"line_end":30,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181759,"byte_end":181762,"line_start":204,"line_end":204,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181966,"byte_end":181969,"line_start":215,"line_end":215,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182086,"byte_end":182092,"line_start":221,"line_end":221,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182303,"byte_end":182309,"line_start":232,"line_end":232,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182914,"byte_end":182918,"line_start":258,"line_end":258,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":183183,"byte_end":183187,"line_start":270,"line_end":270,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191488,"byte_end":191491,"line_start":28,"line_end":28,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191791,"byte_end":191794,"line_start":42,"line_end":42,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195233,"byte_end":195236,"line_start":145,"line_end":145,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195711,"byte_end":195714,"line_start":161,"line_end":161,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196843,"byte_end":196846,"line_start":191,"line_end":191,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198024,"byte_end":198027,"line_start":226,"line_end":226,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198833,"byte_end":198836,"line_start":259,"line_end":259,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242117,"byte_end":242121,"line_start":21,"line_end":21,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242269,"byte_end":242273,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246084,"byte_end":246090,"line_start":52,"line_end":52,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246273,"byte_end":246279,"line_start":64,"line_end":64,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1382},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":247119,"byte_end":247125,"line_start":97,"line_end":97,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1394},{"krate":0,"index":1399},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272691,"byte_end":272703,"line_start":18,"line_end":18,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273836,"byte_end":273848,"line_start":57,"line_end":57,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283711,"byte_end":283722,"line_start":24,"line_end":24,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284428,"byte_end":284439,"line_start":54,"line_end":54,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284864,"byte_end":284875,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":288152,"byte_end":288163,"line_start":165,"line_end":165,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289155,"byte_end":289166,"line_start":200,"line_end":200,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":259219,"byte_end":259227,"line_start":31,"line_end":31,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":260184,"byte_end":260192,"line_start":64,"line_end":64,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":2442,"byte_end":2447,"line_start":32,"line_end":32,"column_start":29,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3245,"byte_end":3256,"line_start":57,"line_end":57,"column_start":27,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3756,"byte_end":3766,"line_start":74,"line_end":74,"column_start":24,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":990},"to":{"krate":0,"index":36}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":3773,"byte_end":3778,"line_start":74,"line_end":74,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":36}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5390,"byte_end":5396,"line_start":135,"line_end":135,"column_start":26,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":36}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":5629,"byte_end":5632,"line_start":144,"line_end":144,"column_start":26,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":36}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/bound.rs","byte_start":6110,"byte_end":6114,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":20,"index":3269},"to":{"krate":0,"index":36}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7293,"byte_end":7296,"line_start":27,"line_end":27,"column_start":25,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":7808,"byte_end":7814,"line_start":54,"line_end":54,"column_start":25,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/de.rs","byte_start":8404,"byte_end":8408,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":20,"index":3269},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15028,"byte_end":15036,"line_start":24,"line_end":24,"column_start":13,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":15248,"byte_end":15256,"line_start":33,"line_end":33,"column_start":43,"column_end":51},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21232,"byte_end":21240,"line_start":200,"line_end":200,"column_start":43,"column_end":51},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":21755,"byte_end":21767,"line_start":223,"line_end":223,"column_start":26,"column_end":38},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":8596}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/deque.rs","byte_start":23057,"byte_end":23069,"line_start":265,"line_end":265,"column_start":37,"column_end":49},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":8442}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36243,"byte_end":36248,"line_start":12,"line_end":12,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/endian.rs","byte_start":36251,"byte_end":36255,"line_start":12,"line_end":12,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":253}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":44941,"byte_end":44951,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":45437,"byte_end":45447,"line_start":56,"line_end":56,"column_start":19,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":49870,"byte_end":49880,"line_start":173,"line_end":173,"column_start":19,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":50946,"byte_end":50956,"line_start":202,"line_end":202,"column_start":19,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_map.rs","byte_start":51403,"byte_end":51413,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":98633,"byte_end":98651,"line_start":25,"line_end":25,"column_start":19,"column_end":37},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":99736,"byte_end":99754,"line_start":66,"line_end":66,"column_start":19,"column_end":37},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":100656,"byte_end":100674,"line_start":98,"line_end":98,"column_start":19,"column_end":37},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":104163,"byte_end":104181,"line_start":189,"line_end":189,"column_start":19,"column_end":37},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105171,"byte_end":105189,"line_start":222,"line_end":222,"column_start":19,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexed_snapshot.rs","byte_start":105636,"byte_end":105654,"line_start":238,"line_end":238,"column_start":19,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":137769,"byte_end":137779,"line_start":39,"line_end":39,"column_start":21,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140206,"byte_end":140216,"line_start":128,"line_end":128,"column_start":34,"column_end":44},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":638},"to":{"krate":0,"index":865}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":140763,"byte_end":140773,"line_start":145,"line_end":145,"column_start":21,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":141176,"byte_end":141186,"line_start":161,"line_end":161,"column_start":21,"column_end":31},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":142198,"byte_end":142208,"line_start":195,"line_end":195,"column_start":21,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144168,"byte_end":144178,"line_start":250,"line_end":250,"column_start":21,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/multi.rs","byte_start":144972,"byte_end":144982,"line_start":278,"line_end":278,"column_start":21,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":148316,"byte_end":148327,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":149115,"byte_end":149126,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":778},"to":{"krate":0,"index":865}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":150427,"byte_end":150438,"line_start":107,"line_end":107,"column_start":21,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":151304,"byte_end":151315,"line_start":137,"line_end":137,"column_start":21,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/indexes/unique.rs","byte_start":152219,"byte_end":152230,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155272,"byte_end":155277,"line_start":7,"line_end":7,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":873}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/int_key.rs","byte_start":155280,"byte_end":155284,"line_start":7,"line_end":7,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":873}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159450,"byte_end":159454,"line_start":21,"line_end":21,"column_start":13,"column_end":17},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/item.rs","byte_start":159648,"byte_end":159652,"line_start":30,"line_end":30,"column_start":13,"column_end":17},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176515,"byte_end":176518,"line_start":17,"line_end":17,"column_start":26,"column_end":29},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":3160}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":176817,"byte_end":176820,"line_start":30,"line_end":30,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":177740,"byte_end":177745,"line_start":55,"line_end":55,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2882},"to":{"krate":0,"index":990}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181759,"byte_end":181762,"line_start":204,"line_end":204,"column_start":29,"column_end":32},"kind":{"Impl":{"id":80}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":990}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":181966,"byte_end":181969,"line_start":215,"line_end":215,"column_start":27,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182086,"byte_end":182092,"line_start":221,"line_end":221,"column_start":29,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":990}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182303,"byte_end":182309,"line_start":232,"line_end":232,"column_start":27,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":182914,"byte_end":182918,"line_start":258,"line_end":258,"column_start":29,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":20,"index":3269},"to":{"krate":0,"index":990}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/keys.rs","byte_start":183183,"byte_end":183187,"line_start":270,"line_end":270,"column_start":27,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":20,"index":3269},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191488,"byte_end":191491,"line_start":28,"line_end":28,"column_start":16,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":191791,"byte_end":191794,"line_start":42,"line_end":42,"column_start":16,"column_end":19},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195233,"byte_end":195236,"line_start":145,"line_end":145,"column_start":16,"column_end":19},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":195711,"byte_end":195714,"line_start":161,"line_end":161,"column_start":16,"column_end":19},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":196843,"byte_end":196846,"line_start":191,"line_end":191,"column_start":16,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198024,"byte_end":198027,"line_start":226,"line_end":226,"column_start":16,"column_end":19},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/map.rs","byte_start":198833,"byte_end":198836,"line_start":259,"line_end":259,"column_start":16,"column_end":19},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242117,"byte_end":242121,"line_start":21,"line_end":21,"column_start":19,"column_end":23},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2197},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/path.rs","byte_start":242269,"byte_end":242273,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246084,"byte_end":246090,"line_start":52,"line_end":52,"column_start":22,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2207},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":246273,"byte_end":246279,"line_start":64,"line_end":64,"column_start":15,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/prefix.rs","byte_start":247119,"byte_end":247125,"line_start":97,"line_end":97,"column_start":19,"column_end":25},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":272691,"byte_end":272703,"line_start":18,"line_end":18,"column_start":13,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/item.rs","byte_start":273836,"byte_end":273848,"line_start":57,"line_end":57,"column_start":13,"column_end":25},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":283711,"byte_end":283722,"line_start":24,"line_end":24,"column_start":16,"column_end":27},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284428,"byte_end":284439,"line_start":54,"line_end":54,"column_start":16,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":284864,"byte_end":284875,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":288152,"byte_end":288163,"line_start":165,"line_end":165,"column_start":16,"column_end":27},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/map.rs","byte_start":289155,"byte_end":289166,"line_start":200,"line_end":200,"column_start":16,"column_end":27},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":259219,"byte_end":259227,"line_start":31,"line_end":31,"column_start":16,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.15.1/src/snapshot/mod.rs","byte_start":260184,"byte_end":260192,"line_start":64,"line_end":64,"column_start":16,"column_end":24},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}}]}