{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3","program":"/home/turtle/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base64ct","--edition=2021","/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=d8a3b0c713fac4ed","-C","extra-filename=-d8a3b0c713fac4ed","--out-dir","/home/turtle/fake_asset_faucet/contracts/cw20-base/target/rls/debug/deps","-L","dependency=/home/turtle/fake_asset_faucet/contracts/cw20-base/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/turtle/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/turtle/fake_asset_faucet/contracts/cw20-base/target/rls/debug/deps/libbase64ct-d8a3b0c713fac4ed.rmeta"},"prelude":{"crate_id":{"name":"base64ct","disambiguator":[17042457356376918884,0]},"crate_root":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src","external_crates":[{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8055937789589085173,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[9266852701449989672,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3150474620658042907,0]}},{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7885665867006586706,0]}}],"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":0,"byte_end":2712,"line_start":1,"line_end":104,"column_start":1,"column_end":33}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2310,"byte_end":2322,"line_start":90,"line_end":90,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2310,"byte_end":2322,"line_start":90,"line_end":90,"column_start":17,"column_end":29},"alias_span":null,"name":"Base64Bcrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":424},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2339,"byte_end":2350,"line_start":91,"line_end":91,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":425},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2339,"byte_end":2350,"line_start":91,"line_end":91,"column_start":16,"column_end":27},"alias_span":null,"name":"Base64Crypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2370,"byte_end":2384,"line_start":92,"line_end":92,"column_start":19,"column_end":33},"alias_span":null,"name":"Base64ShaCrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":438},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2370,"byte_end":2384,"line_start":92,"line_end":92,"column_start":19,"column_end":33},"alias_span":null,"name":"Base64ShaCrypt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2405,"byte_end":2411,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":451},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2405,"byte_end":2411,"line_start":93,"line_end":93,"column_start":20,"column_end":26},"alias_span":null,"name":"Base64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2413,"byte_end":2427,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2413,"byte_end":2427,"line_start":93,"line_end":93,"column_start":28,"column_end":42},"alias_span":null,"name":"Base64Unpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2444,"byte_end":2453,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2444,"byte_end":2453,"line_start":94,"line_end":94,"column_start":15,"column_end":24},"alias_span":null,"name":"Base64Url","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":489},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2455,"byte_end":2472,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":490},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2455,"byte_end":2472,"line_start":94,"line_end":94,"column_start":26,"column_end":43},"alias_span":null,"name":"Base64UrlUnpadded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2495,"byte_end":2502,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":239},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2517,"byte_end":2524,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2540,"byte_end":2548,"line_start":98,"line_end":98,"column_start":15,"column_end":23},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":608},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2563,"byte_end":2568,"line_start":99,"line_end":99,"column_start":14,"column_end":19},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":595},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2570,"byte_end":2590,"line_start":99,"line_end":99,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":596},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2570,"byte_end":2590,"line_start":99,"line_end":99,"column_start":21,"column_end":41},"alias_span":null,"name":"InvalidEncodingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":582},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2592,"byte_end":2610,"line_start":99,"line_end":99,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":583},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2592,"byte_end":2610,"line_start":99,"line_end":99,"column_start":43,"column_end":61},"alias_span":null,"name":"InvalidLengthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":2630,"byte_end":2640,"line_start":100,"line_end":100,"column_start":18,"column_end":28},"alias_span":null,"name":"LineEnding","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":0,"byte_end":2712,"line_start":1,"line_end":104,"column_start":1,"column_end":33},"name":"","qualname":"::","value":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":126},{"krate":0,"index":211},{"krate":0,"index":271},{"krate":0,"index":337},{"krate":0,"index":355},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":410}],"decl_id":null,"docs":"# [RustCrypto]: Constant-Time Base64","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(clippy :: integer_arithmetic, clippy :: panic, clippy ::\npanic_in_result_fn, clippy :: unwrap_used, missing_docs, rust_2018_idioms,\nunsafe_code, unused_lifetimes, unused_qualifications)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":286,"byte_end":510,"line_start":8,"line_end":18,"column_start":1,"column_end":3}},{"value":"/ # Usage","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":512,"byte_end":523,"line_start":20,"line_end":20,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":524,"byte_end":527,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ## Allocating (enable `alloc` crate feature)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":528,"byte_end":576,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":577,"byte_end":580,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":581,"byte_end":588,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"alloc\")]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":589,"byte_end":620,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":621,"byte_end":628,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":629,"byte_end":666,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":667,"byte_end":670,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":671,"byte_end":710,"line_start":29,"line_end":29,"column_start":1,"column_end":40}},{"value":"/ let encoded = Base64::encode_string(bytes);","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":711,"byte_end":758,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":759,"byte_end":815,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":816,"byte_end":819,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let decoded = Base64::decode_vec(&encoded).unwrap();","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":820,"byte_end":876,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":877,"byte_end":908,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":909,"byte_end":916,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":917,"byte_end":924,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":925,"byte_end":928,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ## Heapless `no_std` usage","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":929,"byte_end":959,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":960,"byte_end":963,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":964,"byte_end":971,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use base64ct::{Base64, Encoding};","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":972,"byte_end":1009,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1010,"byte_end":1013,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ const BUF_SIZE: usize = 128;","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1014,"byte_end":1046,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1047,"byte_end":1050,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let bytes = b\"example bytestring!\";","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1051,"byte_end":1090,"line_start":45,"line_end":45,"column_start":1,"column_end":40}},{"value":"/ assert!(Base64::encoded_len(bytes) <= BUF_SIZE);","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1091,"byte_end":1143,"line_start":46,"line_end":46,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1144,"byte_end":1147,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ let mut enc_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1148,"byte_end":1186,"line_start":48,"line_end":48,"column_start":1,"column_end":39}},{"value":"/ let encoded = Base64::encode(bytes, &mut enc_buf).unwrap();","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1187,"byte_end":1250,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(encoded, \"ZXhhbXBsZSBieXRlc3RyaW5nIQ==\");","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1251,"byte_end":1307,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1308,"byte_end":1311,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let mut dec_buf = [0u8; BUF_SIZE];","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1312,"byte_end":1350,"line_start":52,"line_end":52,"column_start":1,"column_end":39}},{"value":"/ let decoded = Base64::decode(encoded, &mut dec_buf).unwrap();","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1351,"byte_end":1416,"line_start":53,"line_end":53,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(decoded, bytes);","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1417,"byte_end":1448,"line_start":54,"line_end":54,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1449,"byte_end":1456,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1457,"byte_end":1460,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1461,"byte_end":1481,"line_start":57,"line_end":57,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1482,"byte_end":1485,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Implemented using integer arithmetic alone without any lookup tables or","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1486,"byte_end":1561,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ data-dependent branches, thereby providing portable \"best effort\"","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1562,"byte_end":1631,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ constant-time operation.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1632,"byte_end":1660,"line_start":61,"line_end":61,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1661,"byte_end":1664,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Not constant-time with respect to message length (only data).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1665,"byte_end":1730,"line_start":63,"line_end":63,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1731,"byte_end":1734,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Adapted from the following constant-time C++ implementation of Base64:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1735,"byte_end":1809,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1810,"byte_end":1813,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ <https://github.com/Sc00bz/ConstTimeEncoding/blob/master/base64.cpp>","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1814,"byte_end":1886,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1887,"byte_end":1890,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Copyright (c) 2014 Steve \"Sc00bz\" Thomas (steve at tobtu dot com).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1891,"byte_end":1961,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/ Derived code is dual licensed MIT + Apache 2 (with permission from Sc00bz).","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/lib.rs","byte_start":1962,"byte_end":2041,"line_start":70,"line_end":70,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6771,"byte_end":6783,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Base64Bcrypt","qualname":"::alphabet::bcrypt::Base64Bcrypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" bcrypt Base64 encoding.","sig":null,"attributes":[{"value":"/ bcrypt Base64 encoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6574,"byte_end":6601,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6602,"byte_end":6605,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6606,"byte_end":6617,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ./         [A-Z]      [a-z]     [0-9]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6618,"byte_end":6659,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/ 0x2e-0x2f, 0x41-0x5a, 0x61-0x7a, 0x30-0x39","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6660,"byte_end":6706,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6707,"byte_end":6714,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":25},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6829,"byte_end":6833,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::bcrypt::Base64Bcrypt as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":26},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6857,"byte_end":6864,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::bcrypt::Base64Bcrypt as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":7089,"byte_end":7096,"line_start":24,"line_end":24,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::bcrypt::Base64Bcrypt as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":7254,"byte_end":7260,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::bcrypt::Base64Bcrypt as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":424},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7567,"byte_end":7578,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"Base64Crypt","qualname":"::alphabet::crypt::Base64Crypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" `crypt(3)` Base64 encoding.","sig":null,"attributes":[{"value":"/ `crypt(3)` Base64 encoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7387,"byte_end":7418,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7419,"byte_end":7422,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7423,"byte_end":7434,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [.-9]      [A-Z]      [a-z]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7435,"byte_end":7466,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/ 0x2e-0x39, 0x41-0x5a, 0x61-0x7a","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7467,"byte_end":7502,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7503,"byte_end":7510,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":42},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7623,"byte_end":7627,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::crypt::Base64Crypt as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":43},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7651,"byte_end":7658,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::crypt::Base64Crypt as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":44},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7840,"byte_end":7847,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::crypt::Base64Crypt as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":45},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7951,"byte_end":7957,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::crypt::Base64Crypt as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8384,"byte_end":8398,"line_start":16,"line_end":16,"column_start":12,"column_end":26},"name":"Base64ShaCrypt","qualname":"::alphabet::shacrypt::Base64ShaCrypt","value":"","parent":null,"children":[],"decl_id":null,"docs":" `crypt(3)` Base64 encoding for the following schemes.\n  * sha1_crypt,\n  * sha256_crypt,\n  * sha512_crypt,\n  * md5_crypt","sig":null,"attributes":[{"value":"/ `crypt(3)` Base64 encoding for the following schemes.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8100,"byte_end":8157,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/  * sha1_crypt,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8158,"byte_end":8176,"line_start":6,"line_end":6,"column_start":1,"column_end":19}},{"value":"/  * sha256_crypt,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8177,"byte_end":8197,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/  * sha512_crypt,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8198,"byte_end":8218,"line_start":8,"line_end":8,"column_start":1,"column_end":21}},{"value":"/  * md5_crypt","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8219,"byte_end":8235,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8236,"byte_end":8239,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8240,"byte_end":8251,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ [.-9]      [A-Z]      [a-z]","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8252,"byte_end":8283,"line_start":12,"line_end":12,"column_start":1,"column_end":32}},{"value":"/ 0x2e-0x39, 0x41-0x5a, 0x61-0x7a","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8284,"byte_end":8319,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8320,"byte_end":8327,"line_start":14,"line_end":14,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8446,"byte_end":8450,"line_start":19,"line_end":19,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::shacrypt::Base64ShaCrypt as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8474,"byte_end":8481,"line_start":21,"line_end":21,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::shacrypt::Base64ShaCrypt as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":61},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8663,"byte_end":8670,"line_start":27,"line_end":27,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::shacrypt::Base64ShaCrypt as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":62},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8774,"byte_end":8780,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::shacrypt::Base64ShaCrypt as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8853,"byte_end":8866,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"decode_3bytes","qualname":"<Base64ShaCrypt as alphabet::Alphabet>::decode_3bytes","value":"fn decode_3bytes<'_, '_>(&'_ [u8], &'_ mut [u8]) -> i16","parent":{"krate":0,"index":116},"children":[],"decl_id":{"krate":0,"index":122},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8828,"byte_end":8845,"line_start":34,"line_end":34,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":9426,"byte_end":9439,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"encode_3bytes","qualname":"<Base64ShaCrypt as alphabet::Alphabet>::encode_3bytes","value":"fn encode_3bytes<'_, '_>(&'_ [u8], &'_ mut [u8])","parent":{"krate":0,"index":116},"children":[],"decl_id":{"krate":0,"index":124},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":9401,"byte_end":9418,"line_start":51,"line_end":51,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10213,"byte_end":10219,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Base64","qualname":"::alphabet::standard::Base64","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding with `=` padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":9993,"byte_end":10039,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10040,"byte_end":10043,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10044,"byte_end":10055,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10056,"byte_end":10100,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10101,"byte_end":10148,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10149,"byte_end":10156,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10259,"byte_end":10263,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::standard::Base64 as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10286,"byte_end":10293,"line_start":16,"line_end":16,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::standard::Base64 as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10338,"byte_end":10345,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::standard::Base64 as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":81},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10390,"byte_end":10396,"line_start":18,"line_end":18,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::standard::Base64 as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":463},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10671,"byte_end":10685,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"Base64Unpadded","qualname":"::alphabet::standard::Base64Unpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" Standard Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ Standard Base64 encoding *without* padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10450,"byte_end":10497,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10498,"byte_end":10501,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10502,"byte_end":10513,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      +     /","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10514,"byte_end":10558,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2b, 0x2f","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10559,"byte_end":10606,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10607,"byte_end":10614,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10733,"byte_end":10737,"line_start":32,"line_end":32,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::standard::Base64Unpadded as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10760,"byte_end":10767,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::standard::Base64Unpadded as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10812,"byte_end":10819,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::standard::Base64Unpadded as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":87},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10864,"byte_end":10870,"line_start":35,"line_end":35,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::standard::Base64Unpadded as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11693,"byte_end":11702,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Base64Url","qualname":"::alphabet::url::Base64Url","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding with `=` padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding with `=` padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11473,"byte_end":11519,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11520,"byte_end":11523,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11524,"byte_end":11535,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11536,"byte_end":11580,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11581,"byte_end":11628,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11629,"byte_end":11636,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":103},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11745,"byte_end":11749,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::url::Base64Url as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11772,"byte_end":11779,"line_start":16,"line_end":16,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::url::Base64Url as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11824,"byte_end":11831,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::url::Base64Url as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11876,"byte_end":11882,"line_start":18,"line_end":18,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::url::Base64Url as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":489},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12160,"byte_end":12177,"line_start":29,"line_end":29,"column_start":12,"column_end":29},"name":"Base64UrlUnpadded","qualname":"::alphabet::url::Base64UrlUnpadded","value":"","parent":null,"children":[],"decl_id":null,"docs":" URL-safe Base64 encoding *without* padding.","sig":null,"attributes":[{"value":"/ URL-safe Base64 encoding *without* padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11939,"byte_end":11986,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11987,"byte_end":11990,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11991,"byte_end":12002,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/ [A-Z]      [a-z]      [0-9]      -     _","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12003,"byte_end":12047,"line_start":25,"line_end":25,"column_start":1,"column_end":45}},{"value":"/ 0x41-0x5a, 0x61-0x7a, 0x30-0x39, 0x2d, 0x5f","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12048,"byte_end":12095,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12096,"byte_end":12103,"line_start":27,"line_end":27,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12228,"byte_end":12232,"line_start":32,"line_end":32,"column_start":11,"column_end":15},"name":"BASE","qualname":"::<alphabet::url::Base64UrlUnpadded as alphabet::Alphabet>::BASE","value":"u8","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12255,"byte_end":12262,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::<alphabet::url::Base64UrlUnpadded as alphabet::Alphabet>::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12307,"byte_end":12314,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::<alphabet::url::Base64UrlUnpadded as alphabet::Alphabet>::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12359,"byte_end":12365,"line_start":35,"line_end":35,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::<alphabet::url::Base64UrlUnpadded as alphabet::Alphabet>::PADDED","value":"bool","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":116},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3039,"byte_end":3047,"line_start":15,"line_end":15,"column_start":11,"column_end":19},"name":"Alphabet","qualname":"::alphabet::Alphabet","value":"Alphabet: 'static + Copy + Debug + Eq + Send + Sized + Sync","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" Core encoder/decoder functions for a particular Base64 alphabet.\n","sig":null,"attributes":[{"value":"/ Core encoder/decoder functions for a particular Base64 alphabet.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":2960,"byte_end":3028,"line_start":14,"line_end":14,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3160,"byte_end":3164,"line_start":17,"line_end":17,"column_start":11,"column_end":15},"name":"BASE","qualname":"::alphabet::Alphabet::BASE","value":"u8","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" First character in this Base64 alphabet.\n","sig":null,"attributes":[{"value":"/ First character in this Base64 alphabet.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3105,"byte_end":3149,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3204,"byte_end":3211,"line_start":20,"line_end":20,"column_start":11,"column_end":18},"name":"DECODER","qualname":"::alphabet::Alphabet::DECODER","value":"&'static [DecodeStep]","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Decoder passes\n","sig":null,"attributes":[{"value":"/ Decoder passes","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3175,"byte_end":3193,"line_start":19,"line_end":19,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3270,"byte_end":3277,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"ENCODER","qualname":"::alphabet::Alphabet::ENCODER","value":"&'static [EncodeStep]","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Encoder passes\n","sig":null,"attributes":[{"value":"/ Encoder passes","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3241,"byte_end":3259,"line_start":22,"line_end":22,"column_start":5,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3346,"byte_end":3352,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"PADDED","qualname":"::alphabet::Alphabet::PADDED","value":"bool","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Is this encoding padded?\n","sig":null,"attributes":[{"value":"/ Is this encoding padded?","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3307,"byte_end":3335,"line_start":25,"line_end":25,"column_start":5,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":121},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3502,"byte_end":3510,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Unpadded","qualname":"::alphabet::Alphabet::Unpadded","value":"type Unpadded: Alphabet;","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Unpadded equivalent of this alphabet.","sig":null,"attributes":[{"value":"/ Unpadded equivalent of this alphabet.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3365,"byte_end":3406,"line_start":28,"line_end":28,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3411,"byte_end":3414,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For alphabets that are unpadded to begin with, this should be `Self`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3419,"byte_end":3492,"line_start":30,"line_end":30,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3596,"byte_end":3609,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"decode_3bytes","qualname":"::alphabet::Alphabet::decode_3bytes","value":"fn decode_3bytes<'_, '_>(&'_ [u8], &'_ mut [u8]) -> i16","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Decode 3 bytes of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Decode 3 bytes of a Base64 message.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3527,"byte_end":3566,"line_start":33,"line_end":33,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3571,"byte_end":3588,"line_start":34,"line_end":34,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":4174,"byte_end":4186,"line_start":52,"line_end":52,"column_start":8,"column_end":20},"name":"decode_6bits","qualname":"::alphabet::Alphabet::decode_6bits","value":"fn decode_6bits(u8) -> i16","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Decode 6-bits of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Decode 6-bits of a Base64 message.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":4128,"byte_end":4166,"line_start":51,"line_end":51,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":5021,"byte_end":5034,"line_start":76,"line_end":76,"column_start":8,"column_end":21},"name":"encode_3bytes","qualname":"::alphabet::Alphabet::encode_3bytes","value":"fn encode_3bytes<'_, '_>(&'_ [u8], &'_ mut [u8])","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Encode 3-bytes of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Encode 3-bytes of a Base64 message.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":4952,"byte_end":4991,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":4996,"byte_end":5013,"line_start":75,"line_end":75,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":5579,"byte_end":5591,"line_start":92,"line_end":92,"column_start":8,"column_end":20},"name":"encode_6bits","qualname":"::alphabet::Alphabet::encode_6bits","value":"fn encode_6bits(i16) -> u8","parent":{"krate":0,"index":116},"children":[],"decl_id":null,"docs":" Encode 6-bits of a Base64 message.\n","sig":null,"attributes":[{"value":"/ Encode 6-bits of a Base64 message.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":5511,"byte_end":5549,"line_start":90,"line_end":90,"column_start":5,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":5554,"byte_end":5571,"line_start":91,"line_end":91,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6116,"byte_end":6121,"line_start":110,"line_end":110,"column_start":5,"column_end":10},"name":"Range","qualname":"::alphabet::DecodeStep::Range","value":"DecodeStep::Range(RangeInclusive<u8>, i16)","parent":{"krate":0,"index":502},"children":[],"decl_id":null,"docs":" Match the given range, offsetting the input on match.\n","sig":null,"attributes":[{"value":"/ Match the given range, offsetting the input on match.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6054,"byte_end":6111,"line_start":109,"line_end":109,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":505},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6122,"byte_end":6140,"line_start":110,"line_end":110,"column_start":11,"column_end":29},"name":"0","qualname":"::alphabet::DecodeStep::Range::0","value":"core::ops::RangeInclusive<u8>","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":506},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6142,"byte_end":6145,"line_start":110,"line_end":110,"column_start":31,"column_end":34},"name":"1","qualname":"::alphabet::DecodeStep::Range::1","value":"i16","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6226,"byte_end":6228,"line_start":113,"line_end":113,"column_start":5,"column_end":7},"name":"Eq","qualname":"::alphabet::DecodeStep::Eq","value":"DecodeStep::Eq(u8, i16)","parent":{"krate":0,"index":502},"children":[],"decl_id":null,"docs":" Match the given value, returning the associated offset on match.\n","sig":null,"attributes":[{"value":"/ Match the given value, returning the associated offset on match.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6153,"byte_end":6221,"line_start":112,"line_end":112,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":509},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6229,"byte_end":6231,"line_start":113,"line_end":113,"column_start":8,"column_end":10},"name":"0","qualname":"::alphabet::DecodeStep::Eq::0","value":"u8","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":510},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6233,"byte_end":6236,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"1","qualname":"::alphabet::DecodeStep::Eq::1","value":"i16","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":502},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6037,"byte_end":6047,"line_start":108,"line_end":108,"column_start":10,"column_end":20},"name":"DecodeStep","qualname":"::alphabet::DecodeStep","value":"enum DecodeStep { Range(RangeInclusive<u8>, i16), Eq(u8, i16), }","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":507}],"decl_id":null,"docs":" Constant-time decoder step.\n","sig":null,"attributes":[{"value":"/ Constant-time decoder step.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":5979,"byte_end":6010,"line_start":106,"line_end":106,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":514},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6396,"byte_end":6401,"line_start":120,"line_end":120,"column_start":5,"column_end":10},"name":"Apply","qualname":"::alphabet::EncodeStep::Apply","value":"EncodeStep::Apply(u8, i16)","parent":{"krate":0,"index":513},"children":[],"decl_id":null,"docs":" Apply the given offset to the cumulative result on match.\n","sig":null,"attributes":[{"value":"/ Apply the given offset to the cumulative result on match.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6330,"byte_end":6391,"line_start":119,"line_end":119,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":516},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6402,"byte_end":6404,"line_start":120,"line_end":120,"column_start":11,"column_end":13},"name":"0","qualname":"::alphabet::EncodeStep::Apply::0","value":"u8","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":517},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6406,"byte_end":6409,"line_start":120,"line_end":120,"column_start":15,"column_end":18},"name":"1","qualname":"::alphabet::EncodeStep::Apply::1","value":"i16","parent":{"krate":0,"index":514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":518},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6479,"byte_end":6483,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Diff","qualname":"::alphabet::EncodeStep::Diff","value":"EncodeStep::Diff(u8, i16)","parent":{"krate":0,"index":513},"children":[],"decl_id":null,"docs":" Compute a difference using the given offset on match.\n","sig":null,"attributes":[{"value":"/ Compute a difference using the given offset on match.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6417,"byte_end":6474,"line_start":122,"line_end":122,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":520},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6484,"byte_end":6486,"line_start":123,"line_end":123,"column_start":10,"column_end":12},"name":"0","qualname":"::alphabet::EncodeStep::Diff::0","value":"u8","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":521},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6488,"byte_end":6491,"line_start":123,"line_end":123,"column_start":14,"column_end":17},"name":"1","qualname":"::alphabet::EncodeStep::Diff::1","value":"i16","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":513},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6313,"byte_end":6323,"line_start":118,"line_end":118,"column_start":10,"column_end":20},"name":"EncodeStep","qualname":"::alphabet::EncodeStep","value":"enum EncodeStep { Apply(u8, i16), Diff(u8, i16), }","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":518}],"decl_id":null,"docs":" Constant-time encoder step.\n","sig":null,"attributes":[{"value":"/ Constant-time encoder step.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":6242,"byte_end":6273,"line_start":116,"line_end":116,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":527},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13466,"byte_end":13473,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decoder::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" Stateful Base64 decoder with support for buffered, incremental decoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 decoder with support for buffered, incremental decoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13243,"byte_end":13319,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13320,"byte_end":13323,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13324,"byte_end":13399,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13400,"byte_end":13437,"line_start":24,"line_end":24,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14185,"byte_end":14188,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn new(&'i [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing contiguous\n (non-newline-delimited) Base64-encoded data.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing contiguous","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13927,"byte_end":13990,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/ (non-newline-delimited) Base64-encoded data.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13995,"byte_end":14043,"line_start":45,"line_end":45,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14048,"byte_end":14051,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14056,"byte_end":14069,"line_start":47,"line_end":47,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14074,"byte_end":14105,"line_start":48,"line_end":48,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14110,"byte_end":14173,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15395,"byte_end":15406,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Decoder>::new_wrapped","value":"fn new_wrapped(&'i [u8], usize) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder for a byte slice containing Base64 which\n line wraps at the given line length.","sig":null,"attributes":[{"value":"/ Create a new decoder for a byte slice containing Base64 which","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14566,"byte_end":14631,"line_start":63,"line_end":63,"column_start":5,"column_end":70}},{"value":"/ line wraps at the given line length.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14636,"byte_end":14676,"line_start":64,"line_end":64,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14681,"byte_end":14684,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Trailing newlines are not supported and must be removed in advance.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14689,"byte_end":14760,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14765,"byte_end":14768,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Newlines are handled according to what are roughly [RFC7468] conventions:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14773,"byte_end":14850,"line_start":68,"line_end":68,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14855,"byte_end":14858,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14863,"byte_end":14874,"line_start":70,"line_end":70,"column_start":5,"column_end":16}},{"value":"/ [parsers] MUST handle different newline conventions","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14879,"byte_end":14934,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14939,"byte_end":14946,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14951,"byte_end":14954,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ RFC7468 allows any of the following as newlines, and allows a mixture","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":14959,"byte_end":15032,"line_start":74,"line_end":74,"column_start":5,"column_end":78}},{"value":"/ of different types of newlines:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15037,"byte_end":15072,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15077,"byte_end":15080,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15085,"byte_end":15096,"line_start":77,"line_end":77,"column_start":5,"column_end":16}},{"value":"/ eol        = CRLF / CR / LF","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15101,"byte_end":15132,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15137,"byte_end":15144,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15149,"byte_end":15152,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15157,"byte_end":15170,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ - `Ok(decoder)` on success.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15175,"byte_end":15206,"line_start":82,"line_end":82,"column_start":5,"column_end":36}},{"value":"/ - `Err(Error::InvalidLength)` if the input buffer is empty or the line","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15211,"byte_end":15285,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/   width is zero.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15290,"byte_end":15310,"line_start":84,"line_end":84,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15315,"byte_end":15318,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ [RFC7468]: https://datatracker.ietf.org/doc/html/rfc7468","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15323,"byte_end":15383,"line_start":86,"line_end":86,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":16135,"byte_end":16141,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"decode","qualname":"<Decoder>::decode","value":"fn decode<'o, '_>(&'_ mut Self, &'o mut [u8]) -> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Fill the provided buffer with data decoded from Base64.","sig":null,"attributes":[{"value":"/ Fill the provided buffer with data decoded from Base64.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15813,"byte_end":15872,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15877,"byte_end":15880,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Enough Base64 input data must remain to fill the entire buffer.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15885,"byte_end":15952,"line_start":102,"line_end":102,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15957,"byte_end":15960,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15965,"byte_end":15978,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":15983,"byte_end":16040,"line_start":105,"line_end":105,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if the exact amount of data couldn't be read","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":16045,"byte_end":16123,"line_start":106,"line_end":106,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18747,"byte_end":18760,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"decode_to_end","qualname":"<Decoder>::decode_to_end","value":"fn decode_to_end<'o, '_>(&'_ mut Self, &'o mut Vec<u8>)\n-> Result<&'o [u8], Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode all remaining Base64 data, placing the result into `buf`.","sig":null,"attributes":[{"value":"/ Decode all remaining Base64 data, placing the result into `buf`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18473,"byte_end":18541,"line_start":164,"line_end":164,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18546,"byte_end":18549,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ If successful, this function will return the total number of bytes","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18554,"byte_end":18624,"line_start":166,"line_end":166,"column_start":5,"column_end":75}},{"value":"/ decoded into `buf`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18629,"byte_end":18652,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":18657,"byte_end":18682,"line_start":168,"line_end":168,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19459,"byte_end":19472,"line_start":188,"line_end":188,"column_start":12,"column_end":25},"name":"remaining_len","qualname":"<Decoder>::remaining_len","value":"fn remaining_len<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the remaining data after Base64 decoding.","sig":null,"attributes":[{"value":"/ Get the length of the remaining data after Base64 decoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19330,"byte_end":19393,"line_start":185,"line_end":185,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19398,"byte_end":19401,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Decreases every time data is decoded.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19406,"byte_end":19447,"line_start":187,"line_end":187,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19584,"byte_end":19595,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"is_finished","qualname":"<Decoder>::is_finished","value":"fn is_finished<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has all of the input data been decoded?\n","sig":null,"attributes":[{"value":"/ Has all of the input data been decoded?","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":19529,"byte_end":19572,"line_start":192,"line_end":192,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":239},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":33611,"byte_end":33618,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encoder::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"decl_id":null,"docs":" Stateful Base64 encoder with support for buffered, incremental encoding.","sig":null,"attributes":[{"value":"/ Stateful Base64 encoder with support for buffered, incremental encoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":33405,"byte_end":33481,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":33482,"byte_end":33485,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The `E` type parameter can be any type which impls [`Encoding`] such as","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":33486,"byte_end":33561,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ [`Base64`] or [`Base64Unpadded`].","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":33562,"byte_end":33599,"line_start":19,"line_end":19,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34258,"byte_end":34261,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"fn new(&'o mut [u8]) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes output to the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes output to the given byte slice.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34103,"byte_end":34172,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34177,"byte_end":34180,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Output constructed using this method is not line-wrapped.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34185,"byte_end":34246,"line_start":41,"line_end":41,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34942,"byte_end":34953,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"new_wrapped","qualname":"<Encoder>::new_wrapped","value":"fn new_wrapped(&'o mut [u8], usize, LineEnding) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder which writes line-wrapped output to the given byte\n slice.","sig":null,"attributes":[{"value":"/ Create a new encoder which writes line-wrapped output to the given byte","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34592,"byte_end":34667,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ slice.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34672,"byte_end":34682,"line_start":57,"line_end":57,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34687,"byte_end":34690,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Output will be wrapped at the specified interval, using the provided","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34695,"byte_end":34767,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ line ending. Use [`LineEnding::default()`] to use the conventional line","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34772,"byte_end":34847,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/ ending for the target OS.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34852,"byte_end":34881,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34886,"byte_end":34889,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Minimum allowed line width is 4.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34894,"byte_end":34930,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35478,"byte_end":35484,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder>::encode","value":"fn encode<'_, '_>(&'_ mut Self, &'_ [u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode the provided buffer as Base64, writing it to the output buffer.","sig":null,"attributes":[{"value":"/ Encode the provided buffer as Base64, writing it to the output buffer.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35214,"byte_end":35288,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35293,"byte_end":35296,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35301,"byte_end":35314,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/ - `Ok(bytes)` if the expected amount of data was read","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35319,"byte_end":35376,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/ - `Err(Error::InvalidLength)` if there is insufficient space in the output buffer","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":35381,"byte_end":35466,"line_start":78,"line_end":78,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":36760,"byte_end":36768,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"position","qualname":"<Encoder>::position","value":"fn position<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the position inside of the output buffer where the write cursor\n is currently located.\n","sig":null,"attributes":[{"value":"/ Get the position inside of the output buffer where the write cursor","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":36647,"byte_end":36718,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ is currently located.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":36723,"byte_end":36748,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":36900,"byte_end":36906,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"fn finish(Self) -> Result<&'o str, Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":36820,"byte_end":36888,"line_start":118,"line_end":118,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":37155,"byte_end":37176,"line_start":125,"line_end":125,"column_start":12,"column_end":33},"name":"finish_with_remaining","qualname":"<Encoder>::finish_with_remaining","value":"fn finish_with_remaining(Self) -> Result<(&'o str, &'o mut [u8]), Error>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding data, returning the resulting Base64 as a `str`\n along with the remaining space in the output buffer.\n","sig":null,"attributes":[{"value":"/ Finish encoding data, returning the resulting Base64 as a `str`","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":37015,"byte_end":37082,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/ along with the remaining space in the output buffer.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":37087,"byte_end":37143,"line_start":124,"line_end":124,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":297},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45542,"byte_end":45550,"line_start":31,"line_end":31,"column_start":11,"column_end":19},"name":"Encoding","qualname":"::encoding::Encoding","value":"Encoding: Alphabet","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305}],"decl_id":null,"docs":" Base64 encoding trait.","sig":null,"attributes":[{"value":"/ Base64 encoding trait.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":44982,"byte_end":45008,"line_start":18,"line_end":18,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45009,"byte_end":45012,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This trait must be imported to make use of any Base64 alphabet defined","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45013,"byte_end":45087,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ in this crate.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45088,"byte_end":45106,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45107,"byte_end":45110,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The following encoding types impl this trait:","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45111,"byte_end":45160,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45161,"byte_end":45164,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - [`Base64`]: standard Base64 encoding with `=` padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45165,"byte_end":45225,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/ - [`Base64Bcrypt`]: bcrypt Base64 encoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45226,"byte_end":45273,"line_start":26,"line_end":26,"column_start":1,"column_end":48}},{"value":"/ - [`Base64Crypt`]: `crypt(3)` Base64 encoding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45274,"byte_end":45324,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/ - [`Base64Unpadded`]: standard Base64 encoding *without* padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45325,"byte_end":45394,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ - [`Base64Url`]: URL-safe Base64 encoding with `=` padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45395,"byte_end":45458,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/ - [`Base64UrlUnpadded`]: URL-safe Base64 encoding *without* padding.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45459,"byte_end":45531,"line_start":30,"line_end":30,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45639,"byte_end":45645,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"decode","qualname":"::encoding::Encoding::decode","value":"fn decode<'_, impl AsRef<[u8]>>(impl AsRef<[u8]>, &'_ mut [u8])\n-> Result<&'_ [u8], Error> where impl AsRef<[u8]>: AsRef<[u8]>","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Decode a Base64 string into the provided destination buffer.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into the provided destination buffer.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45567,"byte_end":45631,"line_start":32,"line_end":32,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45894,"byte_end":45909,"line_start":39,"line_end":39,"column_start":8,"column_end":23},"name":"decode_in_place","qualname":"::encoding::Encoding::decode_in_place","value":"fn decode_in_place<'_>(&'_ mut [u8]) -> Result<&'_ [u8], InvalidEncodingError>","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Decode a Base64 string in-place.","sig":null,"attributes":[{"value":"/ Decode a Base64 string in-place.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45715,"byte_end":45751,"line_start":35,"line_end":35,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45756,"byte_end":45759,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ NOTE: this method does not (yet) validate that padding is well-formed,","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45764,"byte_end":45838,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ if the given Base64 encoding is padded.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45843,"byte_end":45886,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46108,"byte_end":46118,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"decode_vec","qualname":"::encoding::Encoding::decode_vec","value":"fn decode_vec<'_>(&'_ str) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Decode a Base64 string into a byte vector.\n","sig":null,"attributes":[{"value":"/ Decode a Base64 string into a byte vector.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45971,"byte_end":46017,"line_start":41,"line_end":41,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46022,"byte_end":46047,"line_start":42,"line_end":42,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46341,"byte_end":46347,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"encode","qualname":"::encoding::Encoding::encode","value":"fn encode<'a, '_>(&'_ [u8], &'a mut [u8])\n-> Result<&'a str, InvalidLengthError>","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Encode the input byte slice as Base64.","sig":null,"attributes":[{"value":"/ Encode the input byte slice as Base64.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46164,"byte_end":46206,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46211,"byte_end":46214,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Writes the result into the provided destination slice, returning an","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46219,"byte_end":46290,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ ASCII-encoded Base64 string value.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46295,"byte_end":46333,"line_start":49,"line_end":49,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46666,"byte_end":46679,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"encode_string","qualname":"::encoding::Encoding::encode_string","value":"fn encode_string<'_>(&'_ [u8]) -> String","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Encode input byte slice into a [`String`] containing Base64.","sig":null,"attributes":[{"value":"/ Encode input byte slice into a [`String`] containing Base64.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46428,"byte_end":46492,"line_start":52,"line_end":52,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46497,"byte_end":46500,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46505,"byte_end":46517,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/ If `input` length is greater than `usize::MAX/4`.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46522,"byte_end":46575,"line_start":55,"line_end":55,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46580,"byte_end":46605,"line_start":56,"line_end":56,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46880,"byte_end":46891,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::encoding::Encoding::encoded_len","value":"fn encoded_len<'_>(&'_ [u8]) -> usize","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":" Get the length of Base64 produced by encoding the given bytes.","sig":null,"attributes":[{"value":"/ Get the length of Base64 produced by encoding the given bytes.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46710,"byte_end":46776,"line_start":60,"line_end":60,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46781,"byte_end":46784,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ WARNING: this function will return `0` for lengths greater than `usize::MAX/4`!","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46789,"byte_end":46872,"line_start":62,"line_end":62,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46961,"byte_end":46967,"line_start":67,"line_end":67,"column_start":8,"column_end":14},"name":"decode","qualname":"<T as encoding::Encoding>::decode","value":"fn decode<'_, impl AsRef<[u8]>>(impl AsRef<[u8]>, &'_ mut [u8])\n-> Result<&'_ [u8], Error> where impl AsRef<[u8]>: AsRef<[u8]>","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":298},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":48366,"byte_end":48381,"line_start":108,"line_end":108,"column_start":8,"column_end":23},"name":"decode_in_place","qualname":"<T as encoding::Encoding>::decode_in_place","value":"fn decode_in_place<'_>(&'_ mut [u8]) -> Result<&'_ [u8], InvalidEncodingError>","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":300},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: integer_arithmetic)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":48322,"byte_end":48358,"line_start":107,"line_end":107,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":50819,"byte_end":50829,"line_start":175,"line_end":175,"column_start":8,"column_end":18},"name":"decode_vec","qualname":"<T as encoding::Encoding>::decode_vec","value":"fn decode_vec<'_>(&'_ str) -> Result<Vec<u8>, Error>","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":301},"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":50786,"byte_end":50811,"line_start":174,"line_end":174,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":51162,"byte_end":51168,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"encode","qualname":"<T as encoding::Encoding>::encode","value":"fn encode<'a, '_>(&'_ [u8], &'a mut [u8])\n-> Result<&'a str, InvalidLengthError>","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":302},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":52850,"byte_end":52863,"line_start":237,"line_end":237,"column_start":8,"column_end":21},"name":"encode_string","qualname":"<T as encoding::Encoding>::encode_string","value":"fn encode_string<'_>(&'_ [u8]) -> String","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":304},"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":52817,"byte_end":52842,"line_start":236,"line_end":236,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":53393,"byte_end":53404,"line_start":252,"line_end":252,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"<T as encoding::Encoding>::encoded_len","value":"fn encoded_len<'_>(&'_ [u8]) -> usize","parent":{"krate":0,"index":297},"children":[],"decl_id":{"krate":0,"index":305},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":582},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57639,"byte_end":57657,"line_start":10,"line_end":10,"column_start":12,"column_end":30},"name":"InvalidLengthError","qualname":"::errors::InvalidLengthError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57544,"byte_end":57582,"line_start":8,"line_end":8,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57710,"byte_end":57713,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"fmt","qualname":"<InvalidLengthError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":1,"index":10293},"children":[],"decl_id":{"krate":1,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58004,"byte_end":58024,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"InvalidEncodingError","qualname":"::errors::InvalidEncodingError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57900,"byte_end":57947,"line_start":21,"line_end":21,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58079,"byte_end":58082,"line_start":26,"line_end":26,"column_start":8,"column_end":11},"name":"fmt","qualname":"<InvalidEncodingError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":1,"index":10293},"children":[],"decl_id":{"krate":1,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":609},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58472,"byte_end":58487,"line_start":38,"line_end":38,"column_start":5,"column_end":20},"name":"InvalidEncoding","qualname":"::errors::Error::InvalidEncoding","value":"Error::InvalidEncoding","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Invalid encoding of provided Base64 string.\n","sig":null,"attributes":[{"value":"/ Invalid encoding of provided Base64 string.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58420,"byte_end":58467,"line_start":37,"line_end":37,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":611},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58537,"byte_end":58550,"line_start":41,"line_end":41,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::errors::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":608},"children":[],"decl_id":null,"docs":" Insufficient output buffer length.\n","sig":null,"attributes":[{"value":"/ Insufficient output buffer length.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58494,"byte_end":58532,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":608},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58408,"byte_end":58413,"line_start":36,"line_end":36,"column_start":10,"column_end":15},"name":"Error","qualname":"::errors::Error","value":"enum Error { InvalidEncoding, InvalidLength, }","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":611}],"decl_id":null,"docs":" Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].\n","sig":null,"attributes":[{"value":"/ Generic error, union of [`InvalidLengthError`] and [`InvalidEncodingError`].","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58273,"byte_end":58353,"line_start":34,"line_end":34,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58592,"byte_end":58595,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> Result<(), fmt::Error>","parent":{"krate":1,"index":10293},"children":[],"decl_id":{"krate":1,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58910,"byte_end":58914,"line_start":56,"line_end":56,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as core::convert::From>::from","value":"fn from(InvalidEncodingError) -> Error","parent":{"krate":1,"index":3169},"children":[],"decl_id":{"krate":1,"index":3171},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58893,"byte_end":58902,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59054,"byte_end":59058,"line_start":63,"line_end":63,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as core::convert::From>::from","value":"fn from(InvalidLengthError) -> Error","parent":{"krate":1,"index":3169},"children":[],"decl_id":{"krate":1,"index":3171},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59037,"byte_end":59046,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59196,"byte_end":59200,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as core::convert::From>::from","value":"fn from(core::str::Utf8Error) -> Error","parent":{"krate":1,"index":3169},"children":[],"decl_id":{"krate":1,"index":3171},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59179,"byte_end":59188,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":625},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60163,"byte_end":60165,"line_start":17,"line_end":17,"column_start":5,"column_end":7},"name":"CR","qualname":"::line_ending::LineEnding::CR","value":"LineEnding::CR","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Carriage return: `\\r` (Pre-OS X Macintosh)\n","sig":null,"attributes":[{"value":"/ Carriage return: `\\r` (Pre-OS X Macintosh)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60112,"byte_end":60158,"line_start":16,"line_end":16,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60208,"byte_end":60210,"line_start":20,"line_end":20,"column_start":5,"column_end":7},"name":"LF","qualname":"::line_ending::LineEnding::LF","value":"LineEnding::LF","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Line feed: `\\n` (Unix OSes)\n","sig":null,"attributes":[{"value":"/ Line feed: `\\n` (Unix OSes)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60172,"byte_end":60203,"line_start":19,"line_end":19,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":629},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60271,"byte_end":60275,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::line_ending::LineEnding::CRLF","value":"LineEnding::CRLF","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Carriage return + line feed: `\\r\\n` (Windows)\n","sig":null,"attributes":[{"value":"/ Carriage return + line feed: `\\r\\n` (Windows)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60217,"byte_end":60266,"line_start":22,"line_end":22,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":624},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60095,"byte_end":60105,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"LineEnding","qualname":"::line_ending::LineEnding","value":"enum LineEnding { CR, LF, CRLF, }","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629}],"decl_id":null,"docs":" Line endings: variants of newline characters that can be used with Base64.","sig":null,"attributes":[{"value":"/ Line endings: variants of newline characters that can be used with Base64.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":59799,"byte_end":59877,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":59878,"byte_end":59881,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Use [`LineEnding::default`] to get an appropriate line ending for the","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":59882,"byte_end":59955,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ current operating system.","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":59956,"byte_end":59985,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"allow(clippy :: upper_case_acronyms)","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":59986,"byte_end":60023,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60487,"byte_end":60494,"line_start":33,"line_end":33,"column_start":8,"column_end":15},"name":"default","qualname":"<LineEnding as core::default::Default>::default","value":"fn default() -> LineEnding","parent":{"krate":1,"index":3241},"children":[],"decl_id":{"krate":1,"index":3242},"docs":"","sig":null,"attributes":[{"value":"cfg(not(windows))","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60459,"byte_end":60479,"line_start":32,"line_end":32,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60672,"byte_end":60680,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<LineEnding>::as_bytes","value":"fn as_bytes(Self) -> &'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte serialization of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the byte serialization of this [`LineEnding`].","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60606,"byte_end":60660,"line_start":40,"line_end":40,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60947,"byte_end":60950,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"len","qualname":"<LineEnding>::len","value":"fn len(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the encoded length of this [`LineEnding`].\n","sig":null,"attributes":[{"value":"/ Get the encoded length of this [`LineEnding`].","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60885,"byte_end":60935,"line_start":49,"line_end":49,"column_start":5,"column_end":55}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6804,"byte_end":6816,"line_start":14,"line_end":14,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7599,"byte_end":7610,"line_start":14,"line_end":14,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8419,"byte_end":8433,"line_start":18,"line_end":18,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10240,"byte_end":10246,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10706,"byte_end":10720,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11723,"byte_end":11732,"line_start":14,"line_end":14,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12198,"byte_end":12215,"line_start":31,"line_end":31,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13906,"byte_end":13913,"line_start":43,"line_end":43,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":22698,"byte_end":22709,"line_start":296,"line_end":296,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":24211,"byte_end":24215,"line_start":344,"line_end":344,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":24290,"byte_end":24294,"line_start":350,"line_end":350,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":25785,"byte_end":25795,"line_start":405,"line_end":405,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":29577,"byte_end":29587,"line_start":505,"line_end":505,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34082,"byte_end":34089,"line_start":38,"line_end":38,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":39359,"byte_end":39370,"line_start":194,"line_end":194,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":40759,"byte_end":40770,"line_start":241,"line_end":241,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46950,"byte_end":46951,"line_start":66,"line_end":66,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":312},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":324},{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57682,"byte_end":57700,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58049,"byte_end":58069,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58577,"byte_end":58582,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58881,"byte_end":58886,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59025,"byte_end":59030,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59167,"byte_end":59172,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60297,"byte_end":60307,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60589,"byte_end":60599,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/bcrypt.rs","byte_start":6804,"byte_end":6816,"line_start":14,"line_end":14,"column_start":19,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":411},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/crypt.rs","byte_start":7599,"byte_end":7610,"line_start":14,"line_end":14,"column_start":19,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":424},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/shacrypt.rs","byte_start":8419,"byte_end":8433,"line_start":18,"line_end":18,"column_start":19,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":437},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10240,"byte_end":10246,"line_start":14,"line_end":14,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":450},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/standard.rs","byte_start":10706,"byte_end":10720,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":463},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":11723,"byte_end":11732,"line_start":14,"line_end":14,"column_start":19,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":476},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet/url.rs","byte_start":12198,"byte_end":12215,"line_start":31,"line_end":31,"column_start":19,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":489},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3059,"byte_end":3063,"line_start":15,"line_end":15,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3066,"byte_end":3071,"line_start":15,"line_end":15,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":10286},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3074,"byte_end":3076,"line_start":15,"line_end":15,"column_start":46,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2920},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3079,"byte_end":3083,"line_start":15,"line_end":15,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":3263},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3086,"byte_end":3091,"line_start":15,"line_end":15,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":1,"index":3268},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/alphabet.rs","byte_start":3094,"byte_end":3098,"line_start":15,"line_end":15,"column_start":66,"column_end":70},"kind":"SuperTrait","from":{"krate":1,"index":3275},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":13906,"byte_end":13913,"line_start":43,"line_end":43,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":22698,"byte_end":22709,"line_start":296,"line_end":296,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":24211,"byte_end":24215,"line_start":344,"line_end":344,"column_start":22,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":550},"to":{"krate":1,"index":3241}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":24290,"byte_end":24294,"line_start":350,"line_end":350,"column_start":10,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":25785,"byte_end":25795,"line_start":405,"line_end":405,"column_start":10,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/decoder.rs","byte_start":29577,"byte_end":29587,"line_start":505,"line_end":505,"column_start":23,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":559},"to":{"krate":1,"index":8596}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":34082,"byte_end":34089,"line_start":38,"line_end":38,"column_start":23,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":39359,"byte_end":39370,"line_start":194,"line_end":194,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoder.rs","byte_start":40759,"byte_end":40770,"line_start":241,"line_end":241,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":45552,"byte_end":45560,"line_start":31,"line_end":31,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":116},"to":{"krate":0,"index":297}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/encoding.rs","byte_start":46950,"byte_end":46951,"line_start":66,"line_end":66,"column_start":32,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":307},"to":{"krate":0,"index":297}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":57682,"byte_end":57700,"line_start":12,"line_end":12,"column_start":23,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":10293}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58049,"byte_end":58069,"line_start":25,"line_end":25,"column_start":23,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":595},"to":{"krate":1,"index":10293}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58577,"byte_end":58582,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":608},"to":{"krate":1,"index":10293}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":58881,"byte_end":58886,"line_start":54,"line_end":54,"column_start":37,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":608},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59025,"byte_end":59030,"line_start":61,"line_end":61,"column_start":35,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":608},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/errors.rs","byte_start":59167,"byte_end":59172,"line_start":68,"line_end":68,"column_start":37,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":608},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60297,"byte_end":60307,"line_start":26,"line_end":26,"column_start":18,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":624},"to":{"krate":1,"index":3241}},{"span":{"file_name":"/home/turtle/.cargo/registry/src/github.com-1ecc6299db9ec823/base64ct-1.5.3/src/line_ending.rs","byte_start":60589,"byte_end":60599,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}}]}